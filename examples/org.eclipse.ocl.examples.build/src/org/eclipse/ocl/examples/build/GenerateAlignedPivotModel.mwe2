/**
 * <copyright>
 *
 * Copyright (c) 2013 E.D.Willink and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     E.D.Willink - initial API and implementation
 * </copyright>
 * 
 * Run As->MWE2 Workflow to regenerate the pivot model.
 */
module GenerateAlignedPivotModel

import org.eclipse.ocl.examples.build.utilities.*
import org.eclipse.ocl.examples.build.xtend.*
import org.eclipse.emf.mwe.utils.*
import org.eclipse.emf.mwe.utils.*
import org.eclipse.emf.ecore.resource.impl.*
import org.eclipse.uml2.uml.resource.XMI2UMLResource

var projectName = "org.eclipse.ocl.examples.build"
var ecoreSlot = "ecore"
//var platformURI = ".."

/**
 *	Generate the Pivot Model, by performing the merge to create the flattened package
 *  with additional MDT/OCL content, alphabeticsing the classes, reloading the genmodel
 *  and finally generating the model code.
 */
Workflow {
	bean = ResourceSetImpl : resourceSet {}
//    bean = StandaloneSetup { resourceSet = resourceSet
//    	platformUri = ".."
//    	scanClassPath = true
//    	registerGeneratedEPackage = "org.eclipse.xtext.common.types.TypesPackage"
//    }
    bean = ProjectMapSetup { resourceSet = resourceSet }
    bean = UMLStandaloneSetup { resourceSet = resourceSet }
    bean = OCLStandaloneSetup { resourceSet = resourceSet
    	dynamicPackage = Mapping {
    		from = "http://www.eclipse.org/ocl/2012/UML2EcoreControl"
    		to = "platform:/resource/${projectName}/model/UML2EcoreControl.ecore#/"
    	}
    	dynamicPackage = Mapping {
    		from = "http://www.eclipse.org/ocl/2012/UML2EcoreMapping"
    		to = "platform:/resource/${projectName}/model/UML2EcoreMapping.ecore#/"
    	}
    }
    //
    //	Fixup xmi:ids and convert cmof to uml
    //
    component = IdAssigner { resourceSet = resourceSet skipOnErrors = true
    	assignFlatIds = true
    	mapping = Mapping {
    		from = "/${projectName}/model/PrimitiveTypes.uml"
    		to = "/${projectName}/model-gen/PrimitiveTypes.uml"
    	}
    	mapping = Mapping {
    		from = "/${projectName}/model/UML.uml"
    		to = "/${projectName}/model-gen/UML.uml"
    	}
    }
    component = IdAssigner { resourceSet = resourceSet skipOnErrors = true
    	assignFlatIds = false
    	mapping = Mapping {
    		from = "/org.eclipse.ocl.examples.pivot/model/OCL.cmof"
    		to = "/${projectName}/model-gen/OCL.uml"
    	}
    	mapping = Mapping {
    		from = "/org.eclipse.ocl.examples.pivot/model/MDTOCL.cmof"
    		to = "/${projectName}/model-gen/MDTOCL.uml"
    	}
    	mapping = Mapping {
    		from = "/${projectName}/model/MDTOCL2.cmof"
    		to = "/${projectName}/model-gen/MDTOCL2.uml"
    	}
    }
    //
    //	Create an OclPivot.ecore that can be compared with the new.
    //
    component = ResourceReader { resourceSet = resourceSet skipOnErrors = true
    	modelSlot = "${ecoreSlot}"
    	uri = "/org.eclipse.ocl.examples.pivot/model/Pivot.ecore"
    }
    component = EcoreNormalizer { resourceSet = resourceSet skipOnErrors = true
    	modelSlot = "${ecoreSlot}"
    }
    component = ResourceWriter { resourceSet = resourceSet skipOnErrors = true
    	modelSlot = "${ecoreSlot}"
    	uri = "/${projectName}/model-gen/OldPivot.ecore"
    }
    
    
    
    
    component = QVToTransformationExecutor { resourceSet = resourceSet skipOnErrors = true
    	uri = "platform:/resource/${projectName}/src/org/eclipse/ocl/examples/build/qvto/UML2EcoreAnalyzer.qvto"
    	in = "platform:/resource/${projectName}/model/UML2PivotinEcore.xmi" 
    	out = "platform:/resource/${projectName}/model-gen/UML2PivotAnalysis.xmi" 
	}
    component = QVToTransformationExecutor { resourceSet = resourceSet skipOnErrors = true
    	uri = "platform:/resource/${projectName}/src/org/eclipse/ocl/examples/build/qvto/UML2EcoreSynthesizer.qvto"
    	in = "platform:/resource/${projectName}/model-gen/UML2PivotAnalysis.xmi" 
    	out = "platform:/resource/${projectName}/model-gen/UML2Pivot.ecore" 
	}
    component = ResourceReader { resourceSet = resourceSet skipOnErrors = true
    	modelSlot = "${ecoreSlot}"
    	uri = "/${projectName}/model-gen/UML2Pivot.ecore"
    }
    component = ConstraintMerger { resourceSet = resourceSet skipOnErrors = true
    	projectName = "${projectName}"
    	modelSlot = "${ecoreSlot}"
    	uri = "model/Pivot.ocl"
    }
//    component = EPackageAlphabetizer { skipOnErrors = true
//    	modelSlot = "${ecoreSlot}"
//    }
//    component = PruneSuperClasses { skipOnErrors = true
//    	modelSlot = "${ecoreSlot}"
//    }
//    component = OCLDelegateActivator { skipOnErrors = true
//    	modelSlot = "${pivotSlot}"
//    }
    component = ResourceWriter { resourceSet = resourceSet skipOnErrors = true
    	modelSlot = "${ecoreSlot}"
    	uri = "/${projectName}/model-gen/UML+OCL2Pivot.ecore"
    }
    //
    //	Create a NewPivot.ecore that can be compared with the old.
    //
    component = ResourceReader { resourceSet = resourceSet skipOnErrors = true
    	modelSlot = "${ecoreSlot}"
    	uri = "/${projectName}/model-gen/UML+OCL2Pivot.ecore"
    }
    component = EcoreNormalizer { resourceSet = resourceSet skipOnErrors = true
    	modelSlot = "${ecoreSlot}"
    }
    component = ResourceWriter { resourceSet = resourceSet skipOnErrors = true
    	modelSlot = "${ecoreSlot}"
    	uri = "/${projectName}/model-gen/NewPivot.ecore"
    }
}

