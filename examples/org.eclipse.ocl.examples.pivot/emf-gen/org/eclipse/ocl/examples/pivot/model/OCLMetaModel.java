/**
 * <copyright>
 *
 * Copyright (c) 2010,2012 E.D.Willink and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     E.D.Willink - initial API and implementation
 *
 * </copyright>
 *
 * This code is auto-generated
 * from: /org.eclipse.ocl.examples.pivot/model/Pivot.ecore
 * by: org.eclipse.ocl.examples.build.xtend.GenerateOCLMetaModel.xtend
 * and: org.eclipse.ocl.examples.build.GeneratePivotMetaModel.mwe2
 *
 * Do not edit it.
 *
 * $Id$
 */
package	org.eclipse.ocl.examples.pivot.model;

import java.math.BigInteger;
import java.util.List;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceImpl;
import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;
import org.eclipse.ocl.examples.domain.library.LibraryFeature;
import org.eclipse.ocl.examples.domain.utilities.DomainUtil;
import org.eclipse.ocl.examples.pivot.*;
import org.eclipse.ocl.examples.pivot.Class;
import org.eclipse.ocl.examples.pivot.Package;
import org.eclipse.ocl.examples.pivot.manager.PivotStandardLibrary;
import org.eclipse.ocl.examples.pivot.model.OCLstdlib;
import org.eclipse.ocl.examples.pivot.utilities.PivotUtil;

/**
 * This is the http://www.eclipse.org/ocl/3.1.0/Pivot Pivot Model of the Pivot Model
 * auto-generated from /org.eclipse.ocl.examples.pivot/model/Pivot.ecore.
 * It facilitates efficient model loading without the overheads of model reading.
 */
@SuppressWarnings({"nls", "unused"})
public class OCLMetaModel extends XMIResourceImpl
{
	/**
	 *	The URI of this Standard Library.
	 */
	public static final @NonNull String PIVOT_URI = "http://www.eclipse.org/ocl/3.1.0/Pivot";

	public static @NonNull Package create(@NonNull PivotStandardLibrary standardLibrary, @NonNull String name, @Nullable String nsPrefix, @NonNull String nsURI) {
		OCLMetaModel resource = new OCLMetaModel(DomainUtil.nonNullEMF(URI.createURI(PIVOT_URI)));
		Contents contents = new Contents(standardLibrary, name, nsPrefix, nsURI);
		resource.getContents().add(contents.root);
		return contents.metamodel;
	}

	protected OCLMetaModel(@NonNull URI uri) {
		super(uri);
	}

	protected static class LibraryContents extends AbstractContents
	{
		protected final @NonNull PivotStandardLibrary standardLibrary;

		protected LibraryContents(@NonNull PivotStandardLibrary standardLibrary) {
			this.standardLibrary = standardLibrary;
		}
	}

	protected static class Contents extends LibraryContents
	{
		protected final @NonNull Root root;
		protected final @NonNull Package metamodel;
		protected final @NonNull CollectionType _Bag = standardLibrary.getBagType();
		@SuppressWarnings("null") protected final @NonNull TemplateSignature _Bag_ = _Bag.getOwnedTemplateSignature();
		@SuppressWarnings("null") protected final @NonNull TemplateParameter _Bag_T = _Bag_.getParameter().get(0);
		
		protected final @NonNull PrimitiveType _Boolean = standardLibrary.getBooleanType();
		
		protected final @NonNull CollectionType _Collection = standardLibrary.getCollectionType();
		@SuppressWarnings("null") protected final @NonNull TemplateSignature _Collection_ = _Collection.getOwnedTemplateSignature();
		@SuppressWarnings("null") protected final @NonNull TemplateParameter _Collection_T = _Collection_.getParameter().get(0);
		
		protected final @NonNull PrimitiveType _Integer = standardLibrary.getIntegerType();
		
		protected final @NonNull Class _OclElement = standardLibrary.getOclElementType();
		
		protected final @NonNull CollectionType _OrderedSet = standardLibrary.getOrderedSetType();
		@SuppressWarnings("null") protected final @NonNull TemplateSignature _OrderedSet_ = _OrderedSet.getOwnedTemplateSignature();
		@SuppressWarnings("null") protected final @NonNull TemplateParameter _OrderedSet_T = _OrderedSet_.getParameter().get(0);
		
		protected final @NonNull PrimitiveType _Real = standardLibrary.getRealType();
		
		protected final @NonNull CollectionType _Sequence = standardLibrary.getSequenceType();
		@SuppressWarnings("null") protected final @NonNull TemplateSignature _Sequence_ = _Sequence.getOwnedTemplateSignature();
		@SuppressWarnings("null") protected final @NonNull TemplateParameter _Sequence_T = _Sequence_.getParameter().get(0);
		
		protected final @NonNull CollectionType _Set = standardLibrary.getSetType();
		@SuppressWarnings("null") protected final @NonNull TemplateSignature _Set_ = _Set.getOwnedTemplateSignature();
		@SuppressWarnings("null") protected final @NonNull TemplateParameter _Set_T = _Set_.getParameter().get(0);
		
		protected final @NonNull PrimitiveType _String = standardLibrary.getStringType();
		
		protected final @NonNull PrimitiveType _UnlimitedNatural = standardLibrary.getUnlimitedNaturalType();
		
		protected final @NonNull CollectionType _UniqueCollection = standardLibrary.getUniqueCollectionType();
		@SuppressWarnings("null") protected final @NonNull TemplateSignature _UniqueCollection_ = _UniqueCollection.getOwnedTemplateSignature();
		@SuppressWarnings("null") protected final @NonNull TemplateParameter _UniqueCollection_T = _UniqueCollection_.getParameter().get(0);

		protected Contents(@NonNull PivotStandardLibrary standardLibrary, @NonNull String name, @Nullable String nsPrefix, @NonNull String nsURI) {
			super(standardLibrary);
			root = createRoot("pivot", "http://www.eclipse.org/ocl/3.1.0/Pivot");
			metamodel = createPackage(name, nsPrefix, nsURI);
			installPackages();
			installOclTypes();
			installEnumerations();
			installParameterTypes();
			installCollectionTypes();
			installOperations();
			installIterations();
			installProperties();
			installTemplateSignatures();
			installTemplateBindings();
			installComments();
		}
	
		protected final @NonNull Package pk_$$ = createPackage("$$", null, "http://www.eclipse.org/ocl/3.1.0/orphanage");
		
		protected void installPackages() {
			root.getNestedPackage().add(pk_$$);
			root.getNestedPackage().add(metamodel);
		}

		protected final @NonNull Class _Annotation = createClass(PivotPackage.Literals.ANNOTATION);
		protected final @NonNull Class _AnyType = createClass(PivotPackage.Literals.ANY_TYPE);
		protected final @NonNull Class _AssociationClass = createClass(PivotPackage.Literals.ASSOCIATION_CLASS);
		protected final @NonNull Class _AssociationClassCallExp = createClass(PivotPackage.Literals.ASSOCIATION_CLASS_CALL_EXP);
		protected final @NonNull Class _BagType = createClass(PivotPackage.Literals.BAG_TYPE);
		protected final @NonNull Class _Behavior = createClass(PivotPackage.Literals.BEHAVIOR);
		protected final @NonNull Class _BooleanLiteralExp = createClass(PivotPackage.Literals.BOOLEAN_LITERAL_EXP);
		protected final @NonNull Class _CallExp = createClass(PivotPackage.Literals.CALL_EXP);
		protected final @NonNull Class _CallOperationAction = createClass(PivotPackage.Literals.CALL_OPERATION_ACTION);
		protected final @NonNull Class _Class = createClass(PivotPackage.Literals.CLASS);
		protected final @NonNull Class _CollectionItem = createClass(PivotPackage.Literals.COLLECTION_ITEM);
		protected final @NonNull Class _CollectionLiteralExp = createClass(PivotPackage.Literals.COLLECTION_LITERAL_EXP);
		protected final @NonNull Class _CollectionLiteralPart = createClass(PivotPackage.Literals.COLLECTION_LITERAL_PART);
		protected final @NonNull Class _CollectionRange = createClass(PivotPackage.Literals.COLLECTION_RANGE);
		protected final @NonNull Class _CollectionType = createClass(PivotPackage.Literals.COLLECTION_TYPE);
		protected final @NonNull Class _Comment = createClass(PivotPackage.Literals.COMMENT);
		protected final @NonNull Class _ConnectionPointReference = createClass(PivotPackage.Literals.CONNECTION_POINT_REFERENCE);
		protected final @NonNull Class _Constraint = createClass(PivotPackage.Literals.CONSTRAINT);
		protected final @NonNull Class _ConstructorExp = createClass(PivotPackage.Literals.CONSTRUCTOR_EXP);
		protected final @NonNull Class _ConstructorPart = createClass(PivotPackage.Literals.CONSTRUCTOR_PART);
		protected final @NonNull Class _DataType = createClass(PivotPackage.Literals.DATA_TYPE);
		protected final @NonNull Class _Detail = createClass(PivotPackage.Literals.DETAIL);
		protected final @NonNull Class _DynamicElement = createClass(PivotPackage.Literals.DYNAMIC_ELEMENT);
		protected final @NonNull Class _DynamicProperty = createClass(PivotPackage.Literals.DYNAMIC_PROPERTY);
		protected final @NonNull Class _DynamicType = createClass(PivotPackage.Literals.DYNAMIC_TYPE);
		protected final @NonNull Class _Element = createClass(PivotPackage.Literals.ELEMENT);
		protected final @NonNull Class _ElementExtension = createClass(PivotPackage.Literals.ELEMENT_EXTENSION);
		protected final @NonNull Class _EnumLiteralExp = createClass(PivotPackage.Literals.ENUM_LITERAL_EXP);
		protected final @NonNull Class _Enumeration = createClass(PivotPackage.Literals.ENUMERATION);
		protected final @NonNull Class _EnumerationLiteral = createClass(PivotPackage.Literals.ENUMERATION_LITERAL);
		protected final @NonNull Class _ExpressionInOCL = createClass(PivotPackage.Literals.EXPRESSION_IN_OCL);
		protected final @NonNull Class _Feature = createClass(PivotPackage.Literals.FEATURE);
		protected final @NonNull Class _FeatureCallExp = createClass(PivotPackage.Literals.FEATURE_CALL_EXP);
		protected final @NonNull Class _FinalState = createClass(PivotPackage.Literals.FINAL_STATE);
		protected final @NonNull Class _IfExp = createClass(PivotPackage.Literals.IF_EXP);
		protected final @NonNull Class _Import = createClass(PivotPackage.Literals.IMPORT);
		protected final @NonNull Class _IntegerLiteralExp = createClass(PivotPackage.Literals.INTEGER_LITERAL_EXP);
		protected final @NonNull Class _InvalidLiteralExp = createClass(PivotPackage.Literals.INVALID_LITERAL_EXP);
		protected final @NonNull Class _InvalidType = createClass(PivotPackage.Literals.INVALID_TYPE);
		protected final @NonNull Class _IterateExp = createClass(PivotPackage.Literals.ITERATE_EXP);
		protected final @NonNull Class _Iteration = createClass(PivotPackage.Literals.ITERATION);
		protected final @NonNull Class _IteratorExp = createClass(PivotPackage.Literals.ITERATOR_EXP);
		protected final @NonNull Class _LambdaType = createClass(PivotPackage.Literals.LAMBDA_TYPE);
		protected final @NonNull Class _LetExp = createClass(PivotPackage.Literals.LET_EXP);
		protected final @NonNull Class _Library = createClass(PivotPackage.Literals.LIBRARY);
		protected final @NonNull DataType _LibraryFeature = createDataType(PivotPackage.Literals.LIBRARY_FEATURE);
		protected final @NonNull Class _LiteralExp = createClass(PivotPackage.Literals.LITERAL_EXP);
		protected final @NonNull Class _LoopExp = createClass(PivotPackage.Literals.LOOP_EXP);
		protected final @NonNull Class _MessageExp = createClass(PivotPackage.Literals.MESSAGE_EXP);
		protected final @NonNull Class _MessageType = createClass(PivotPackage.Literals.MESSAGE_TYPE);
		protected final @NonNull Class _Metaclass = createClass(PivotPackage.Literals.METACLASS);
		protected final @NonNull Class _MorePivotable = createClass(PivotPackage.Literals.MORE_PIVOTABLE);
		protected final @NonNull Class _Nameable = createClass(PivotPackage.Literals.NAMEABLE);
		protected final @NonNull Class _NamedElement = createClass(PivotPackage.Literals.NAMED_ELEMENT);
		protected final @NonNull Class _Namespace = createClass(PivotPackage.Literals.NAMESPACE);
		protected final @NonNull Class _NavigationCallExp = createClass(PivotPackage.Literals.NAVIGATION_CALL_EXP);
		protected final @NonNull Class _NullLiteralExp = createClass(PivotPackage.Literals.NULL_LITERAL_EXP);
		protected final @NonNull Class _NumericLiteralExp = createClass(PivotPackage.Literals.NUMERIC_LITERAL_EXP);
		protected final @NonNull Class _OCLExpression = createClass(PivotPackage.Literals.OCL_EXPRESSION);
		protected final @NonNull DataType _Object = createDataType(PivotPackage.Literals.OBJECT);
		protected final @NonNull Class _OpaqueExpression = createClass(PivotPackage.Literals.OPAQUE_EXPRESSION);
		protected final @NonNull Class _Operation = createClass(PivotPackage.Literals.OPERATION);
		protected final @NonNull Class _OperationCallExp = createClass(PivotPackage.Literals.OPERATION_CALL_EXP);
		protected final @NonNull Class _OperationTemplateParameter = createClass(PivotPackage.Literals.OPERATION_TEMPLATE_PARAMETER);
		protected final @NonNull Class _OrderedSetType = createClass(PivotPackage.Literals.ORDERED_SET_TYPE);
		protected final @NonNull Class _Package = createClass(PivotPackage.Literals.PACKAGE);
		protected final @NonNull Class _PackageableElement = createClass(PivotPackage.Literals.PACKAGEABLE_ELEMENT);
		protected final @NonNull Class _Parameter = createClass(PivotPackage.Literals.PARAMETER);
		protected final @NonNull Class _ParameterableElement = createClass(PivotPackage.Literals.PARAMETERABLE_ELEMENT);
		protected final @NonNull Class _Pivotable = createClass(PivotPackage.Literals.PIVOTABLE);
		protected final @NonNull Class _Precedence = createClass(PivotPackage.Literals.PRECEDENCE);
		protected final @NonNull Class _PrimitiveLiteralExp = createClass(PivotPackage.Literals.PRIMITIVE_LITERAL_EXP);
		protected final @NonNull Class _PrimitiveType = createClass(PivotPackage.Literals.PRIMITIVE_TYPE);
		protected final @NonNull Class _Profile = createClass(PivotPackage.Literals.PROFILE);
		protected final @NonNull Class _Property = createClass(PivotPackage.Literals.PROPERTY);
		protected final @NonNull Class _PropertyCallExp = createClass(PivotPackage.Literals.PROPERTY_CALL_EXP);
		protected final @NonNull Class _Pseudostate = createClass(PivotPackage.Literals.PSEUDOSTATE);
		protected final @NonNull Class _RealLiteralExp = createClass(PivotPackage.Literals.REAL_LITERAL_EXP);
		protected final @NonNull Class _ReferringElement = createClass(PivotPackage.Literals.REFERRING_ELEMENT);
		protected final @NonNull Class _Region = createClass(PivotPackage.Literals.REGION);
		protected final @NonNull Class _Root = createClass(PivotPackage.Literals.ROOT);
		protected final @NonNull Class _SelfType = createClass(PivotPackage.Literals.SELF_TYPE);
		protected final @NonNull Class _SendSignalAction = createClass(PivotPackage.Literals.SEND_SIGNAL_ACTION);
		protected final @NonNull Class _SequenceType = createClass(PivotPackage.Literals.SEQUENCE_TYPE);
		protected final @NonNull Class _SetType = createClass(PivotPackage.Literals.SET_TYPE);
		protected final @NonNull Class _Signal = createClass(PivotPackage.Literals.SIGNAL);
		protected final @NonNull Class _State = createClass(PivotPackage.Literals.STATE);
		protected final @NonNull Class _StateExp = createClass(PivotPackage.Literals.STATE_EXP);
		protected final @NonNull Class _StateMachine = createClass(PivotPackage.Literals.STATE_MACHINE);
		protected final @NonNull Class _Stereotype = createClass(PivotPackage.Literals.STEREOTYPE);
		protected final @NonNull Class _StringLiteralExp = createClass(PivotPackage.Literals.STRING_LITERAL_EXP);
		protected final @NonNull Class _TemplateBinding = createClass(PivotPackage.Literals.TEMPLATE_BINDING);
		protected final @NonNull Class _TemplateParameter = createClass(PivotPackage.Literals.TEMPLATE_PARAMETER);
		protected final @NonNull Class _TemplateParameterSubstitution = createClass(PivotPackage.Literals.TEMPLATE_PARAMETER_SUBSTITUTION);
		protected final @NonNull Class _TemplateParameterType = createClass(PivotPackage.Literals.TEMPLATE_PARAMETER_TYPE);
		protected final @NonNull Class _TemplateSignature = createClass(PivotPackage.Literals.TEMPLATE_SIGNATURE);
		protected final @NonNull Class _TemplateableElement = createClass(PivotPackage.Literals.TEMPLATEABLE_ELEMENT);
		protected final @NonNull DataType _Throwable = createDataType(PivotPackage.Literals.THROWABLE);
		protected final @NonNull Class _Transition = createClass(PivotPackage.Literals.TRANSITION);
		protected final @NonNull Class _Trigger = createClass(PivotPackage.Literals.TRIGGER);
		protected final @NonNull Class _TupleLiteralExp = createClass(PivotPackage.Literals.TUPLE_LITERAL_EXP);
		protected final @NonNull Class _TupleLiteralPart = createClass(PivotPackage.Literals.TUPLE_LITERAL_PART);
		protected final @NonNull Class _TupleType = createClass(PivotPackage.Literals.TUPLE_TYPE);
		protected final @NonNull Class _Type = createClass(PivotPackage.Literals.TYPE);
		protected final @NonNull Class _TypeExp = createClass(PivotPackage.Literals.TYPE_EXP);
		protected final @NonNull Class _TypeTemplateParameter = createClass(PivotPackage.Literals.TYPE_TEMPLATE_PARAMETER);
		protected final @NonNull Class _TypedElement = createClass(PivotPackage.Literals.TYPED_ELEMENT);
		protected final @NonNull Class _TypedMultiplicityElement = createClass(PivotPackage.Literals.TYPED_MULTIPLICITY_ELEMENT);
		protected final @NonNull Class _UnlimitedNaturalLiteralExp = createClass(PivotPackage.Literals.UNLIMITED_NATURAL_LITERAL_EXP);
		protected final @NonNull Class _UnspecifiedType = createClass(PivotPackage.Literals.UNSPECIFIED_TYPE);
		protected final @NonNull Class _UnspecifiedValueExp = createClass(PivotPackage.Literals.UNSPECIFIED_VALUE_EXP);
		protected final @NonNull Class _ValueSpecification = createClass(PivotPackage.Literals.VALUE_SPECIFICATION);
		protected final @NonNull Class _Variable = createClass(PivotPackage.Literals.VARIABLE);
		protected final @NonNull Class _VariableDeclaration = createClass(PivotPackage.Literals.VARIABLE_DECLARATION);
		protected final @NonNull Class _VariableExp = createClass(PivotPackage.Literals.VARIABLE_EXP);
		protected final @NonNull Class _Vertex = createClass(PivotPackage.Literals.VERTEX);
		protected final @NonNull Class _Visitable = createClass(PivotPackage.Literals.VISITABLE);
		protected final @NonNull Class _Visitor = createClass(PivotPackage.Literals.VISITOR);
		protected final @NonNull Class _VoidType = createClass(PivotPackage.Literals.VOID_TYPE);
		protected final @NonNull AnyType _$$ = createAnyType("$$");

		protected final @NonNull Enumeration _AssociativityKind = createEnumeration(PivotPackage.Literals.ASSOCIATIVITY_KIND);
		protected final @NonNull EnumerationLiteral el__AssociativityKind_Left = createEnumerationLiteral(PivotPackage.Literals.ASSOCIATIVITY_KIND.getEEnumLiteral(AssociativityKind.LEFT_VALUE));
		protected final @NonNull EnumerationLiteral el__AssociativityKind_Right = createEnumerationLiteral(PivotPackage.Literals.ASSOCIATIVITY_KIND.getEEnumLiteral(AssociativityKind.RIGHT_VALUE));
		protected final @NonNull Enumeration _CollectionKind = createEnumeration(PivotPackage.Literals.COLLECTION_KIND);
		protected final @NonNull EnumerationLiteral el__CollectionKind_Collection = createEnumerationLiteral(PivotPackage.Literals.COLLECTION_KIND.getEEnumLiteral(CollectionKind.COLLECTION_VALUE));
		protected final @NonNull EnumerationLiteral el__CollectionKind_Set = createEnumerationLiteral(PivotPackage.Literals.COLLECTION_KIND.getEEnumLiteral(CollectionKind.SET_VALUE));
		protected final @NonNull EnumerationLiteral el__CollectionKind_OrderedSet = createEnumerationLiteral(PivotPackage.Literals.COLLECTION_KIND.getEEnumLiteral(CollectionKind.ORDERED_SET_VALUE));
		protected final @NonNull EnumerationLiteral el__CollectionKind_Bag = createEnumerationLiteral(PivotPackage.Literals.COLLECTION_KIND.getEEnumLiteral(CollectionKind.BAG_VALUE));
		protected final @NonNull EnumerationLiteral el__CollectionKind_Sequence = createEnumerationLiteral(PivotPackage.Literals.COLLECTION_KIND.getEEnumLiteral(CollectionKind.SEQUENCE_VALUE));
		protected final @NonNull Enumeration _PseudostateKind = createEnumeration(PivotPackage.Literals.PSEUDOSTATE_KIND);
		protected final @NonNull EnumerationLiteral el__PseudostateKind_initial = createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral(PseudostateKind.INITIAL_VALUE));
		protected final @NonNull EnumerationLiteral el__PseudostateKind_deepHistory = createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral(PseudostateKind.DEEP_HISTORY_VALUE));
		protected final @NonNull EnumerationLiteral el__PseudostateKind_shallowHistory = createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral(PseudostateKind.SHALLOW_HISTORY_VALUE));
		protected final @NonNull EnumerationLiteral el__PseudostateKind_join = createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral(PseudostateKind.JOIN_VALUE));
		protected final @NonNull EnumerationLiteral el__PseudostateKind_fork = createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral(PseudostateKind.FORK_VALUE));
		protected final @NonNull EnumerationLiteral el__PseudostateKind_junction = createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral(PseudostateKind.JUNCTION_VALUE));
		protected final @NonNull EnumerationLiteral el__PseudostateKind_choice = createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral(PseudostateKind.CHOICE_VALUE));
		protected final @NonNull EnumerationLiteral el__PseudostateKind_entryPoint = createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral(PseudostateKind.ENTRY_POINT_VALUE));
		protected final @NonNull EnumerationLiteral el__PseudostateKind_exitPoint = createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral(PseudostateKind.EXIT_POINT_VALUE));
		protected final @NonNull EnumerationLiteral el__PseudostateKind_terminate = createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral(PseudostateKind.TERMINATE_VALUE));
		protected final @NonNull Enumeration _TransitionKind = createEnumeration(PivotPackage.Literals.TRANSITION_KIND);
		protected final @NonNull EnumerationLiteral el__TransitionKind_internal = createEnumerationLiteral(PivotPackage.Literals.TRANSITION_KIND.getEEnumLiteral(TransitionKind.INTERNAL_VALUE));
		protected final @NonNull EnumerationLiteral el__TransitionKind_local = createEnumerationLiteral(PivotPackage.Literals.TRANSITION_KIND.getEEnumLiteral(TransitionKind.LOCAL_VALUE));
		protected final @NonNull EnumerationLiteral el__TransitionKind_external = createEnumerationLiteral(PivotPackage.Literals.TRANSITION_KIND.getEEnumLiteral(TransitionKind.EXTERNAL_VALUE));

		protected final @NonNull Class _Visitor_R = createClass("R");

		protected final @NonNull BagType _Bag_AssociationClassCallExp = createBagType("Bag"/*AssociationClassCallExp*/, "0", "*");
		protected final @NonNull BagType _Bag_Behavior = createBagType("Bag"/*Behavior*/, "0", "*");
		protected final @NonNull BagType _Bag_CallOperationAction = createBagType("Bag"/*CallOperationAction*/, "0", "*");
		protected final @NonNull BagType _Bag_CollectionType = createBagType("Bag"/*CollectionType*/, "0", "*");
		protected final @NonNull BagType _Bag_Comment = createBagType("Bag"/*Comment*/, "0", "*");
		protected final @NonNull BagType _Bag_ConnectionPointReference = createBagType("Bag"/*ConnectionPointReference*/, "0", "*");
		protected final @NonNull BagType _Bag_Constraint = createBagType("Bag"/*Constraint*/, "0", "*");
		protected final @NonNull BagType _Bag_ConstructorPart = createBagType("Bag"/*ConstructorPart*/, "0", "*");
		protected final @NonNull BagType _Bag_DataType = createBagType("Bag"/*DataType*/, "0", "*");
		protected final @NonNull BagType _Bag_DynamicElement = createBagType("Bag"/*DynamicElement*/, "0", "*");
		protected final @NonNull BagType _Bag_DynamicProperty = createBagType("Bag"/*DynamicProperty*/, "0", "*");
		protected final @NonNull BagType _Bag_ElementExtension = createBagType("Bag"/*ElementExtension*/, "0", "*");
		protected final @NonNull BagType _Bag_Element = createBagType("Bag"/*Element*/, "0", "*");
		protected final @NonNull BagType _Bag_EnumLiteralExp = createBagType("Bag"/*EnumLiteralExp*/, "0", "*");
		protected final @NonNull BagType _Bag_Import = createBagType("Bag"/*Import*/, "0", "*");
		protected final @NonNull BagType _Bag_LoopExp = createBagType("Bag"/*LoopExp*/, "0", "*");
		protected final @NonNull BagType _Bag_MessageType = createBagType("Bag"/*MessageType*/, "0", "*");
		protected final @NonNull BagType _Bag_Metaclass = createBagType("Bag"/*Metaclass*/, "0", "*");
		protected final @NonNull BagType _Bag_NavigationCallExp = createBagType("Bag"/*NavigationCallExp*/, "0", "*");
		protected final @NonNull BagType _Bag_OperationCallExp = createBagType("Bag"/*OperationCallExp*/, "0", "*");
		protected final @NonNull BagType _Bag_Operation = createBagType("Bag"/*Operation*/, "0", "*");
		protected final @NonNull BagType _Bag_Package = createBagType("Bag"/*Package*/, "0", "*");
		protected final @NonNull BagType _Bag_ParameterableElement = createBagType("Bag"/*ParameterableElement*/, "0", "*");
		protected final @NonNull BagType _Bag_PropertyCallExp = createBagType("Bag"/*PropertyCallExp*/, "0", "*");
		protected final @NonNull BagType _Bag_Property = createBagType("Bag"/*Property*/, "0", "*");
		protected final @NonNull BagType _Bag_Pseudostate = createBagType("Bag"/*Pseudostate*/, "0", "*");
		protected final @NonNull BagType _Bag_Region = createBagType("Bag"/*Region*/, "0", "*");
		protected final @NonNull BagType _Bag_SendSignalAction = createBagType("Bag"/*SendSignalAction*/, "0", "*");
		protected final @NonNull BagType _Bag_StateExp = createBagType("Bag"/*StateExp*/, "0", "*");
		protected final @NonNull BagType _Bag_StateMachine = createBagType("Bag"/*StateMachine*/, "0", "*");
		protected final @NonNull BagType _Bag_State = createBagType("Bag"/*State*/, "0", "*");
		protected final @NonNull BagType _Bag_String = createBagType("Bag"/*String*/, "0", "*");
		protected final @NonNull BagType _Bag_TemplateBinding = createBagType("Bag"/*TemplateBinding*/, "0", "*");
		protected final @NonNull BagType _Bag_TemplateParameterSubstitution = createBagType("Bag"/*TemplateParameterSubstitution*/, "0", "*");
		protected final @NonNull BagType _Bag_TemplateSignature = createBagType("Bag"/*TemplateSignature*/, "0", "*");
		protected final @NonNull BagType _Bag_Transition = createBagType("Bag"/*Transition*/, "0", "*");
		protected final @NonNull BagType _Bag_Trigger = createBagType("Bag"/*Trigger*/, "0", "*");
		protected final @NonNull BagType _Bag_TypeExp = createBagType("Bag"/*TypeExp*/, "0", "*");
		protected final @NonNull BagType _Bag_TypeTemplateParameter = createBagType("Bag"/*TypeTemplateParameter*/, "0", "*");
		protected final @NonNull BagType _Bag_Type = createBagType("Bag"/*Type*/, "0", "*");
		protected final @NonNull BagType _Bag_TypedElement = createBagType("Bag"/*TypedElement*/, "0", "*");
		protected final @NonNull BagType _Bag_VariableExp = createBagType("Bag"/*VariableExp*/, "0", "*");
		protected final @NonNull BagType _Bag_Variable = createBagType("Bag"/*Variable*/, "0", "*");
		protected final @NonNull BagType _Bag_Vertex = createBagType("Bag"/*Vertex*/, "0", "*");
		protected final @NonNull CollectionType _Collection_Annotation = createCollectionType("Collection"/*Annotation*/, "0", "*");
		protected final @NonNull CollectionType _Collection_AssociationClassCallExp = createCollectionType("Collection"/*AssociationClassCallExp*/, "0", "*");
		protected final @NonNull CollectionType _Collection_Behavior = createCollectionType("Collection"/*Behavior*/, "0", "*");
		protected final @NonNull CollectionType _Collection_CallOperationAction = createCollectionType("Collection"/*CallOperationAction*/, "0", "*");
		protected final @NonNull CollectionType _Collection_Class = createCollectionType("Collection"/*Class*/, "0", "*");
		protected final @NonNull CollectionType _Collection_CollectionLiteralPart = createCollectionType("Collection"/*CollectionLiteralPart*/, "0", "*");
		protected final @NonNull CollectionType _Collection_CollectionType = createCollectionType("Collection"/*CollectionType*/, "0", "*");
		protected final @NonNull CollectionType _Collection_Comment = createCollectionType("Collection"/*Comment*/, "0", "*");
		protected final @NonNull CollectionType _Collection_ConnectionPointReference = createCollectionType("Collection"/*ConnectionPointReference*/, "0", "*");
		protected final @NonNull CollectionType _Collection_Constraint = createCollectionType("Collection"/*Constraint*/, "0", "*");
		protected final @NonNull CollectionType _Collection_ConstructorPart = createCollectionType("Collection"/*ConstructorPart*/, "0", "*");
		protected final @NonNull CollectionType _Collection_DataType = createCollectionType("Collection"/*DataType*/, "0", "*");
		protected final @NonNull CollectionType _Collection_Detail = createCollectionType("Collection"/*Detail*/, "0", "*");
		protected final @NonNull CollectionType _Collection_DynamicElement = createCollectionType("Collection"/*DynamicElement*/, "0", "*");
		protected final @NonNull CollectionType _Collection_DynamicProperty = createCollectionType("Collection"/*DynamicProperty*/, "0", "*");
		protected final @NonNull CollectionType _Collection_ElementExtension = createCollectionType("Collection"/*ElementExtension*/, "0", "*");
		protected final @NonNull CollectionType _Collection_Element = createCollectionType("Collection"/*Element*/, "0", "*");
		protected final @NonNull CollectionType _Collection_EnumLiteralExp = createCollectionType("Collection"/*EnumLiteralExp*/, "0", "*");
		protected final @NonNull CollectionType _Collection_EnumerationLiteral = createCollectionType("Collection"/*EnumerationLiteral*/, "0", "*");
		protected final @NonNull CollectionType _Collection_Import = createCollectionType("Collection"/*Import*/, "0", "*");
		protected final @NonNull CollectionType _Collection_LoopExp = createCollectionType("Collection"/*LoopExp*/, "0", "*");
		protected final @NonNull CollectionType _Collection_MessageType = createCollectionType("Collection"/*MessageType*/, "0", "*");
		protected final @NonNull CollectionType _Collection_Metaclass = createCollectionType("Collection"/*Metaclass*/, "0", "*");
		protected final @NonNull CollectionType _Collection_NavigationCallExp = createCollectionType("Collection"/*NavigationCallExp*/, "0", "*");
		protected final @NonNull CollectionType _Collection_OCLExpression = createCollectionType("Collection"/*OCLExpression*/, "0", "*");
		protected final @NonNull CollectionType _Collection_OperationCallExp = createCollectionType("Collection"/*OperationCallExp*/, "0", "*");
		protected final @NonNull CollectionType _Collection_Operation = createCollectionType("Collection"/*Operation*/, "0", "*");
		protected final @NonNull CollectionType _Collection_Package = createCollectionType("Collection"/*Package*/, "0", "*");
		protected final @NonNull CollectionType _Collection_Parameter = createCollectionType("Collection"/*Parameter*/, "0", "*");
		protected final @NonNull CollectionType _Collection_ParameterableElement = createCollectionType("Collection"/*ParameterableElement*/, "0", "*");
		protected final @NonNull CollectionType _Collection_Precedence = createCollectionType("Collection"/*Precedence*/, "0", "*");
		protected final @NonNull CollectionType _Collection_PropertyCallExp = createCollectionType("Collection"/*PropertyCallExp*/, "0", "*");
		protected final @NonNull CollectionType _Collection_Property = createCollectionType("Collection"/*Property*/, "0", "*");
		protected final @NonNull CollectionType _Collection_Pseudostate = createCollectionType("Collection"/*Pseudostate*/, "0", "*");
		protected final @NonNull CollectionType _Collection_Region = createCollectionType("Collection"/*Region*/, "0", "*");
		protected final @NonNull CollectionType _Collection_SendSignalAction = createCollectionType("Collection"/*SendSignalAction*/, "0", "*");
		protected final @NonNull CollectionType _Collection_StateExp = createCollectionType("Collection"/*StateExp*/, "0", "*");
		protected final @NonNull CollectionType _Collection_StateMachine = createCollectionType("Collection"/*StateMachine*/, "0", "*");
		protected final @NonNull CollectionType _Collection_State = createCollectionType("Collection"/*State*/, "0", "*");
		protected final @NonNull CollectionType _Collection_String = createCollectionType("Collection"/*String*/, "0", "*");
		protected final @NonNull CollectionType _Collection_TemplateBinding = createCollectionType("Collection"/*TemplateBinding*/, "0", "*");
		protected final @NonNull CollectionType _Collection_TemplateParameterSubstitution = createCollectionType("Collection"/*TemplateParameterSubstitution*/, "0", "*");
		protected final @NonNull CollectionType _Collection_TemplateParameter = createCollectionType("Collection"/*TemplateParameter*/, "0", "*");
		protected final @NonNull CollectionType _Collection_TemplateSignature = createCollectionType("Collection"/*TemplateSignature*/, "0", "*");
		protected final @NonNull CollectionType _Collection_Transition = createCollectionType("Collection"/*Transition*/, "0", "*");
		protected final @NonNull CollectionType _Collection_Trigger = createCollectionType("Collection"/*Trigger*/, "0", "*");
		protected final @NonNull CollectionType _Collection_TupleLiteralPart = createCollectionType("Collection"/*TupleLiteralPart*/, "0", "*");
		protected final @NonNull CollectionType _Collection_TypeExp = createCollectionType("Collection"/*TypeExp*/, "0", "*");
		protected final @NonNull CollectionType _Collection_TypeTemplateParameter = createCollectionType("Collection"/*TypeTemplateParameter*/, "0", "*");
		protected final @NonNull CollectionType _Collection_Type = createCollectionType("Collection"/*Type*/, "0", "*");
		protected final @NonNull CollectionType _Collection_TypedElement = createCollectionType("Collection"/*TypedElement*/, "0", "*");
		protected final @NonNull CollectionType _Collection_VariableExp = createCollectionType("Collection"/*VariableExp*/, "0", "*");
		protected final @NonNull CollectionType _Collection_Variable = createCollectionType("Collection"/*Variable*/, "0", "*");
		protected final @NonNull CollectionType _Collection_Vertex = createCollectionType("Collection"/*Vertex*/, "0", "*");
		protected final @NonNull OrderedSetType _OrderedSet_Annotation = createOrderedSetType("OrderedSet"/*Annotation*/, "0", "*");
		protected final @NonNull OrderedSetType _OrderedSet_Class = createOrderedSetType("OrderedSet"/*Class*/, "0", "*");
		protected final @NonNull OrderedSetType _OrderedSet_CollectionLiteralPart = createOrderedSetType("OrderedSet"/*CollectionLiteralPart*/, "0", "*");
		protected final @NonNull OrderedSetType _OrderedSet_Constraint = createOrderedSetType("OrderedSet"/*Constraint*/, "0", "*");
		protected final @NonNull OrderedSetType _OrderedSet_ConstructorPart = createOrderedSetType("OrderedSet"/*ConstructorPart*/, "0", "*");
		protected final @NonNull OrderedSetType _OrderedSet_Detail = createOrderedSetType("OrderedSet"/*Detail*/, "0", "*");
		protected final @NonNull OrderedSetType _OrderedSet_Element = createOrderedSetType("OrderedSet"/*Element*/, "0", "*");
		protected final @NonNull OrderedSetType _OrderedSet_EnumerationLiteral = createOrderedSetType("OrderedSet"/*EnumerationLiteral*/, "0", "*");
		protected final @NonNull OrderedSetType _OrderedSet_Import = createOrderedSetType("OrderedSet"/*Import*/, "0", "*");
		protected final @NonNull OrderedSetType _OrderedSet_OCLExpression = createOrderedSetType("OrderedSet"/*OCLExpression*/, "0", "*");
		protected final @NonNull OrderedSetType _OrderedSet_Operation = createOrderedSetType("OrderedSet"/*Operation*/, "0", "*");
		protected final @NonNull OrderedSetType _OrderedSet_Parameter = createOrderedSetType("OrderedSet"/*Parameter*/, "0", "*");
		protected final @NonNull OrderedSetType _OrderedSet_Precedence = createOrderedSetType("OrderedSet"/*Precedence*/, "0", "*");
		protected final @NonNull OrderedSetType _OrderedSet_Property = createOrderedSetType("OrderedSet"/*Property*/, "0", "*");
		protected final @NonNull OrderedSetType _OrderedSet_String = createOrderedSetType("OrderedSet"/*String*/, "0", "*");
		protected final @NonNull OrderedSetType _OrderedSet_TemplateParameter = createOrderedSetType("OrderedSet"/*TemplateParameter*/, "0", "*");
		protected final @NonNull OrderedSetType _OrderedSet_TemplateParameter_1 = createOrderedSetType("OrderedSet"/*TemplateParameter*/, "1", "*");
		protected final @NonNull OrderedSetType _OrderedSet_TupleLiteralPart = createOrderedSetType("OrderedSet"/*TupleLiteralPart*/, "0", "*");
		protected final @NonNull OrderedSetType _OrderedSet_Type = createOrderedSetType("OrderedSet"/*Type*/, "0", "*");
		protected final @NonNull OrderedSetType _OrderedSet_Variable = createOrderedSetType("OrderedSet"/*Variable*/, "0", "*");
		protected final @NonNull SequenceType _Sequence_Annotation = createSequenceType("Sequence"/*Annotation*/, "0", "*");
		protected final @NonNull SequenceType _Sequence_Class = createSequenceType("Sequence"/*Class*/, "0", "*");
		protected final @NonNull SequenceType _Sequence_CollectionLiteralPart = createSequenceType("Sequence"/*CollectionLiteralPart*/, "0", "*");
		protected final @NonNull SequenceType _Sequence_Constraint = createSequenceType("Sequence"/*Constraint*/, "0", "*");
		protected final @NonNull SequenceType _Sequence_ConstructorPart = createSequenceType("Sequence"/*ConstructorPart*/, "0", "*");
		protected final @NonNull SequenceType _Sequence_Detail = createSequenceType("Sequence"/*Detail*/, "0", "*");
		protected final @NonNull SequenceType _Sequence_Element = createSequenceType("Sequence"/*Element*/, "0", "*");
		protected final @NonNull SequenceType _Sequence_EnumerationLiteral = createSequenceType("Sequence"/*EnumerationLiteral*/, "0", "*");
		protected final @NonNull SequenceType _Sequence_Import = createSequenceType("Sequence"/*Import*/, "0", "*");
		protected final @NonNull SequenceType _Sequence_OCLExpression = createSequenceType("Sequence"/*OCLExpression*/, "0", "*");
		protected final @NonNull SequenceType _Sequence_Operation = createSequenceType("Sequence"/*Operation*/, "0", "*");
		protected final @NonNull SequenceType _Sequence_Parameter = createSequenceType("Sequence"/*Parameter*/, "0", "*");
		protected final @NonNull SequenceType _Sequence_Precedence = createSequenceType("Sequence"/*Precedence*/, "0", "*");
		protected final @NonNull SequenceType _Sequence_Property = createSequenceType("Sequence"/*Property*/, "0", "*");
		protected final @NonNull SequenceType _Sequence_String = createSequenceType("Sequence"/*String*/, "0", "*");
		protected final @NonNull SequenceType _Sequence_TemplateParameter = createSequenceType("Sequence"/*TemplateParameter*/, "0", "*");
		protected final @NonNull SequenceType _Sequence_TupleLiteralPart = createSequenceType("Sequence"/*TupleLiteralPart*/, "0", "*");
		protected final @NonNull SequenceType _Sequence_Type = createSequenceType("Sequence"/*Type*/, "0", "*");
		protected final @NonNull SequenceType _Sequence_Variable = createSequenceType("Sequence"/*Variable*/, "0", "*");
		protected final @NonNull SetType _Set_AssociationClassCallExp = createSetType("Set"/*AssociationClassCallExp*/, "0", "*");
		protected final @NonNull SetType _Set_Behavior = createSetType("Set"/*Behavior*/, "0", "*");
		protected final @NonNull SetType _Set_CallOperationAction = createSetType("Set"/*CallOperationAction*/, "0", "*");
		protected final @NonNull SetType _Set_CollectionType = createSetType("Set"/*CollectionType*/, "0", "*");
		protected final @NonNull SetType _Set_Comment = createSetType("Set"/*Comment*/, "0", "*");
		protected final @NonNull SetType _Set_ConnectionPointReference = createSetType("Set"/*ConnectionPointReference*/, "0", "*");
		protected final @NonNull SetType _Set_Constraint = createSetType("Set"/*Constraint*/, "0", "*");
		protected final @NonNull SetType _Set_ConstructorPart = createSetType("Set"/*ConstructorPart*/, "0", "*");
		protected final @NonNull SetType _Set_DataType = createSetType("Set"/*DataType*/, "0", "*");
		protected final @NonNull SetType _Set_DynamicElement = createSetType("Set"/*DynamicElement*/, "0", "*");
		protected final @NonNull SetType _Set_DynamicProperty = createSetType("Set"/*DynamicProperty*/, "0", "*");
		protected final @NonNull SetType _Set_ElementExtension = createSetType("Set"/*ElementExtension*/, "0", "*");
		protected final @NonNull SetType _Set_Element = createSetType("Set"/*Element*/, "0", "*");
		protected final @NonNull SetType _Set_EnumLiteralExp = createSetType("Set"/*EnumLiteralExp*/, "0", "*");
		protected final @NonNull SetType _Set_Import = createSetType("Set"/*Import*/, "0", "*");
		protected final @NonNull SetType _Set_LoopExp = createSetType("Set"/*LoopExp*/, "0", "*");
		protected final @NonNull SetType _Set_MessageType = createSetType("Set"/*MessageType*/, "0", "*");
		protected final @NonNull SetType _Set_Metaclass = createSetType("Set"/*Metaclass*/, "0", "*");
		protected final @NonNull SetType _Set_NavigationCallExp = createSetType("Set"/*NavigationCallExp*/, "0", "*");
		protected final @NonNull SetType _Set_OperationCallExp = createSetType("Set"/*OperationCallExp*/, "0", "*");
		protected final @NonNull SetType _Set_Operation = createSetType("Set"/*Operation*/, "0", "*");
		protected final @NonNull SetType _Set_Package = createSetType("Set"/*Package*/, "0", "*");
		protected final @NonNull SetType _Set_ParameterableElement = createSetType("Set"/*ParameterableElement*/, "0", "*");
		protected final @NonNull SetType _Set_PropertyCallExp = createSetType("Set"/*PropertyCallExp*/, "0", "*");
		protected final @NonNull SetType _Set_Property = createSetType("Set"/*Property*/, "0", "*");
		protected final @NonNull SetType _Set_Pseudostate = createSetType("Set"/*Pseudostate*/, "0", "*");
		protected final @NonNull SetType _Set_Region = createSetType("Set"/*Region*/, "0", "*");
		protected final @NonNull SetType _Set_Region_1 = createSetType("Set"/*Region*/, "1", "*");
		protected final @NonNull SetType _Set_SendSignalAction = createSetType("Set"/*SendSignalAction*/, "0", "*");
		protected final @NonNull SetType _Set_StateExp = createSetType("Set"/*StateExp*/, "0", "*");
		protected final @NonNull SetType _Set_StateMachine = createSetType("Set"/*StateMachine*/, "0", "*");
		protected final @NonNull SetType _Set_State = createSetType("Set"/*State*/, "0", "*");
		protected final @NonNull SetType _Set_String = createSetType("Set"/*String*/, "1", "*");
		protected final @NonNull SetType _Set_TemplateBinding = createSetType("Set"/*TemplateBinding*/, "0", "*");
		protected final @NonNull SetType _Set_TemplateParameterSubstitution = createSetType("Set"/*TemplateParameterSubstitution*/, "0", "*");
		protected final @NonNull SetType _Set_TemplateSignature = createSetType("Set"/*TemplateSignature*/, "0", "*");
		protected final @NonNull SetType _Set_Transition = createSetType("Set"/*Transition*/, "0", "*");
		protected final @NonNull SetType _Set_Trigger = createSetType("Set"/*Trigger*/, "0", "*");
		protected final @NonNull SetType _Set_TypeExp = createSetType("Set"/*TypeExp*/, "0", "*");
		protected final @NonNull SetType _Set_TypeTemplateParameter = createSetType("Set"/*TypeTemplateParameter*/, "0", "*");
		protected final @NonNull SetType _Set_Type = createSetType("Set"/*Type*/, "0", "*");
		protected final @NonNull SetType _Set_TypedElement = createSetType("Set"/*TypedElement*/, "0", "*");
		protected final @NonNull SetType _Set_VariableExp = createSetType("Set"/*VariableExp*/, "0", "*");
		protected final @NonNull SetType _Set_Variable = createSetType("Set"/*Variable*/, "0", "*");
		protected final @NonNull SetType _Set_Vertex = createSetType("Set"/*Vertex*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_Annotation = createCollectionType("UniqueCollection"/*Annotation*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_AssociationClassCallExp = createCollectionType("UniqueCollection"/*AssociationClassCallExp*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_Behavior = createCollectionType("UniqueCollection"/*Behavior*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_CallOperationAction = createCollectionType("UniqueCollection"/*CallOperationAction*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_Class = createCollectionType("UniqueCollection"/*Class*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_CollectionLiteralPart = createCollectionType("UniqueCollection"/*CollectionLiteralPart*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_CollectionType = createCollectionType("UniqueCollection"/*CollectionType*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_Comment = createCollectionType("UniqueCollection"/*Comment*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_ConnectionPointReference = createCollectionType("UniqueCollection"/*ConnectionPointReference*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_Constraint = createCollectionType("UniqueCollection"/*Constraint*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_ConstructorPart = createCollectionType("UniqueCollection"/*ConstructorPart*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_DataType = createCollectionType("UniqueCollection"/*DataType*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_Detail = createCollectionType("UniqueCollection"/*Detail*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_DynamicElement = createCollectionType("UniqueCollection"/*DynamicElement*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_DynamicProperty = createCollectionType("UniqueCollection"/*DynamicProperty*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_ElementExtension = createCollectionType("UniqueCollection"/*ElementExtension*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_Element = createCollectionType("UniqueCollection"/*Element*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_EnumLiteralExp = createCollectionType("UniqueCollection"/*EnumLiteralExp*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_EnumerationLiteral = createCollectionType("UniqueCollection"/*EnumerationLiteral*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_Import = createCollectionType("UniqueCollection"/*Import*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_LoopExp = createCollectionType("UniqueCollection"/*LoopExp*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_MessageType = createCollectionType("UniqueCollection"/*MessageType*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_Metaclass = createCollectionType("UniqueCollection"/*Metaclass*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_NavigationCallExp = createCollectionType("UniqueCollection"/*NavigationCallExp*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_OCLExpression = createCollectionType("UniqueCollection"/*OCLExpression*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_OperationCallExp = createCollectionType("UniqueCollection"/*OperationCallExp*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_Operation = createCollectionType("UniqueCollection"/*Operation*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_Package = createCollectionType("UniqueCollection"/*Package*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_Parameter = createCollectionType("UniqueCollection"/*Parameter*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_ParameterableElement = createCollectionType("UniqueCollection"/*ParameterableElement*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_Precedence = createCollectionType("UniqueCollection"/*Precedence*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_PropertyCallExp = createCollectionType("UniqueCollection"/*PropertyCallExp*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_Property = createCollectionType("UniqueCollection"/*Property*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_Pseudostate = createCollectionType("UniqueCollection"/*Pseudostate*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_Region = createCollectionType("UniqueCollection"/*Region*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_SendSignalAction = createCollectionType("UniqueCollection"/*SendSignalAction*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_StateExp = createCollectionType("UniqueCollection"/*StateExp*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_StateMachine = createCollectionType("UniqueCollection"/*StateMachine*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_State = createCollectionType("UniqueCollection"/*State*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_String = createCollectionType("UniqueCollection"/*String*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_TemplateBinding = createCollectionType("UniqueCollection"/*TemplateBinding*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_TemplateParameterSubstitution = createCollectionType("UniqueCollection"/*TemplateParameterSubstitution*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_TemplateParameter = createCollectionType("UniqueCollection"/*TemplateParameter*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_TemplateSignature = createCollectionType("UniqueCollection"/*TemplateSignature*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_Transition = createCollectionType("UniqueCollection"/*Transition*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_Trigger = createCollectionType("UniqueCollection"/*Trigger*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_TupleLiteralPart = createCollectionType("UniqueCollection"/*TupleLiteralPart*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_TypeExp = createCollectionType("UniqueCollection"/*TypeExp*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_TypeTemplateParameter = createCollectionType("UniqueCollection"/*TypeTemplateParameter*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_Type = createCollectionType("UniqueCollection"/*Type*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_TypedElement = createCollectionType("UniqueCollection"/*TypedElement*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_VariableExp = createCollectionType("UniqueCollection"/*VariableExp*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_Variable = createCollectionType("UniqueCollection"/*Variable*/, "0", "*");
		protected final @NonNull CollectionType _UniqueCollection_Vertex = createCollectionType("UniqueCollection"/*Vertex*/, "0", "*");

		protected void installOclTypes() {
			final List<Type> ownedTypes = metamodel.getOwnedType();
			Type type;
			List<Type> superClasses;
			ownedTypes.add(type = _Annotation);
			superClasses = type.getSuperClass();
			superClasses.add(_NamedElement);
			ownedTypes.add(type = _AnyType);
			superClasses = type.getSuperClass();
			superClasses.add(_Class);
			ownedTypes.add(type = _AssociationClass);
			superClasses = type.getSuperClass();
			superClasses.add(_Class);
			ownedTypes.add(type = _AssociationClassCallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_NavigationCallExp);
			ownedTypes.add(type = _BagType);
			superClasses = type.getSuperClass();
			superClasses.add(_CollectionType);
			ownedTypes.add(type = _Behavior);
			superClasses = type.getSuperClass();
			superClasses.add(_Class);
			ownedTypes.add(type = _BooleanLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_PrimitiveLiteralExp);
			ownedTypes.add(type = _CallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OCLExpression);
			ownedTypes.add(type = _CallOperationAction);
			superClasses = type.getSuperClass();
			superClasses.add(_NamedElement);
			ownedTypes.add(type = _Class);
			superClasses = type.getSuperClass();
			superClasses.add(_Type);
			superClasses.add(_Namespace);
			ownedTypes.add(type = _CollectionItem);
			superClasses = type.getSuperClass();
			superClasses.add(_CollectionLiteralPart);
			ownedTypes.add(type = _CollectionLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_LiteralExp);
			ownedTypes.add(type = _CollectionLiteralPart);
			superClasses = type.getSuperClass();
			superClasses.add(_TypedElement);
			ownedTypes.add(type = _CollectionRange);
			superClasses = type.getSuperClass();
			superClasses.add(_CollectionLiteralPart);
			ownedTypes.add(type = _CollectionType);
			superClasses = type.getSuperClass();
			superClasses.add(_DataType);
			ownedTypes.add(type = _Comment);
			superClasses = type.getSuperClass();
			superClasses.add(_Element);
			ownedTypes.add(type = _ConnectionPointReference);
			superClasses = type.getSuperClass();
			superClasses.add(_Vertex);
			ownedTypes.add(type = _Constraint);
			superClasses = type.getSuperClass();
			superClasses.add(_NamedElement);
			ownedTypes.add(type = _ConstructorExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OCLExpression);
			ownedTypes.add(type = _ConstructorPart);
			superClasses = type.getSuperClass();
			superClasses.add(_TypedElement);
			ownedTypes.add(type = _DataType);
			superClasses = type.getSuperClass();
			superClasses.add(_Class);
			ownedTypes.add(type = _Detail);
			superClasses = type.getSuperClass();
			superClasses.add(_NamedElement);
			ownedTypes.add(type = _DynamicElement);
			superClasses = type.getSuperClass();
			superClasses.add(_Element);
			ownedTypes.add(type = _DynamicProperty);
			superClasses = type.getSuperClass();
			superClasses.add(_Element);
			ownedTypes.add(type = _DynamicType);
			superClasses = type.getSuperClass();
			superClasses.add(_Type);
			superClasses.add(_DynamicElement);
			ownedTypes.add(type = _Element);
			superClasses = type.getSuperClass();
			superClasses.add(_Visitable);
			ownedTypes.add(type = _ElementExtension);
			superClasses = type.getSuperClass();
			superClasses.add(_Type);
			ownedTypes.add(type = _EnumLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_LiteralExp);
			ownedTypes.add(type = _Enumeration);
			superClasses = type.getSuperClass();
			superClasses.add(_DataType);
			ownedTypes.add(type = _EnumerationLiteral);
			superClasses = type.getSuperClass();
			superClasses.add(_NamedElement);
			ownedTypes.add(type = _ExpressionInOCL);
			superClasses = type.getSuperClass();
			superClasses.add(_OpaqueExpression);
			ownedTypes.add(type = _Feature);
			superClasses = type.getSuperClass();
			superClasses.add(_TypedMultiplicityElement);
			ownedTypes.add(type = _FeatureCallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_CallExp);
			ownedTypes.add(type = _FinalState);
			superClasses = type.getSuperClass();
			superClasses.add(_State);
			ownedTypes.add(type = _IfExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OCLExpression);
			ownedTypes.add(type = _Import);
			superClasses = type.getSuperClass();
			superClasses.add(_NamedElement);
			ownedTypes.add(type = _IntegerLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_NumericLiteralExp);
			ownedTypes.add(type = _InvalidLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_LiteralExp);
			ownedTypes.add(type = _InvalidType);
			superClasses = type.getSuperClass();
			superClasses.add(_Class);
			ownedTypes.add(type = _IterateExp);
			superClasses = type.getSuperClass();
			superClasses.add(_LoopExp);
			superClasses.add(_ReferringElement);
			ownedTypes.add(type = _Iteration);
			superClasses = type.getSuperClass();
			superClasses.add(_Operation);
			ownedTypes.add(type = _IteratorExp);
			superClasses = type.getSuperClass();
			superClasses.add(_LoopExp);
			superClasses.add(_ReferringElement);
			ownedTypes.add(type = _LambdaType);
			superClasses = type.getSuperClass();
			superClasses.add(_DataType);
			ownedTypes.add(type = _LetExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OCLExpression);
			ownedTypes.add(type = _Library);
			superClasses = type.getSuperClass();
			superClasses.add(_Package);
			ownedTypes.add(type = _LibraryFeature);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			ownedTypes.add(type = _LiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OCLExpression);
			ownedTypes.add(type = _LoopExp);
			superClasses = type.getSuperClass();
			superClasses.add(_CallExp);
			ownedTypes.add(type = _MessageExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OCLExpression);
			ownedTypes.add(type = _MessageType);
			superClasses = type.getSuperClass();
			superClasses.add(_Type);
			ownedTypes.add(type = _Metaclass);
			superClasses = type.getSuperClass();
			superClasses.add(_Class);
			ownedTypes.add(type = _MorePivotable);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			ownedTypes.add(type = _Nameable);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			ownedTypes.add(type = _NamedElement);
			superClasses = type.getSuperClass();
			superClasses.add(_Element);
			superClasses.add(_Nameable);
			ownedTypes.add(type = _Namespace);
			superClasses = type.getSuperClass();
			superClasses.add(_NamedElement);
			ownedTypes.add(type = _NavigationCallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_FeatureCallExp);
			ownedTypes.add(type = _NullLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_PrimitiveLiteralExp);
			ownedTypes.add(type = _NumericLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_PrimitiveLiteralExp);
			ownedTypes.add(type = _OCLExpression);
			superClasses = type.getSuperClass();
			superClasses.add(_TypedElement);
			ownedTypes.add(type = _Object);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			ownedTypes.add(type = _OpaqueExpression);
			superClasses = type.getSuperClass();
			superClasses.add(_ValueSpecification);
			ownedTypes.add(type = _Operation);
			superClasses = type.getSuperClass();
			superClasses.add(_Feature);
			superClasses.add(_Namespace);
			superClasses.add(_TemplateableElement);
			superClasses.add(_ParameterableElement);
			ownedTypes.add(type = _OperationCallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_FeatureCallExp);
			superClasses.add(_ReferringElement);
			ownedTypes.add(type = _OperationTemplateParameter);
			superClasses = type.getSuperClass();
			superClasses.add(_TemplateParameter);
			ownedTypes.add(type = _OrderedSetType);
			superClasses = type.getSuperClass();
			superClasses.add(_CollectionType);
			ownedTypes.add(type = _Package);
			superClasses = type.getSuperClass();
			superClasses.add(_Namespace);
			superClasses.add(_TemplateableElement);
			ownedTypes.add(type = _PackageableElement);
			superClasses = type.getSuperClass();
			superClasses.add(_ParameterableElement);
			ownedTypes.add(type = _Parameter);
			superClasses = type.getSuperClass();
			superClasses.add(_TypedMultiplicityElement);
			superClasses.add(_VariableDeclaration);
			ownedTypes.add(type = _ParameterableElement);
			superClasses = type.getSuperClass();
			superClasses.add(_Element);
			ownedTypes.add(type = _Pivotable);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			ownedTypes.add(type = _Precedence);
			superClasses = type.getSuperClass();
			superClasses.add(_NamedElement);
			ownedTypes.add(type = _PrimitiveLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_LiteralExp);
			ownedTypes.add(type = _PrimitiveType);
			superClasses = type.getSuperClass();
			superClasses.add(_DataType);
			ownedTypes.add(type = _Profile);
			superClasses = type.getSuperClass();
			superClasses.add(_Package);
			ownedTypes.add(type = _Property);
			superClasses = type.getSuperClass();
			superClasses.add(_Feature);
			superClasses.add(_ParameterableElement);
			ownedTypes.add(type = _PropertyCallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_NavigationCallExp);
			superClasses.add(_ReferringElement);
			ownedTypes.add(type = _Pseudostate);
			superClasses = type.getSuperClass();
			superClasses.add(_Vertex);
			ownedTypes.add(type = _RealLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_NumericLiteralExp);
			ownedTypes.add(type = _ReferringElement);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			ownedTypes.add(type = _Region);
			superClasses = type.getSuperClass();
			superClasses.add(_Namespace);
			ownedTypes.add(type = _Root);
			superClasses = type.getSuperClass();
			superClasses.add(_Namespace);
			ownedTypes.add(type = _SelfType);
			superClasses = type.getSuperClass();
			superClasses.add(_Class);
			ownedTypes.add(type = _SendSignalAction);
			superClasses = type.getSuperClass();
			superClasses.add(_NamedElement);
			ownedTypes.add(type = _SequenceType);
			superClasses = type.getSuperClass();
			superClasses.add(_CollectionType);
			ownedTypes.add(type = _SetType);
			superClasses = type.getSuperClass();
			superClasses.add(_CollectionType);
			ownedTypes.add(type = _Signal);
			superClasses = type.getSuperClass();
			superClasses.add(_NamedElement);
			ownedTypes.add(type = _State);
			superClasses = type.getSuperClass();
			superClasses.add(_Vertex);
			superClasses.add(_Namespace);
			ownedTypes.add(type = _StateExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OCLExpression);
			ownedTypes.add(type = _StateMachine);
			superClasses = type.getSuperClass();
			superClasses.add(_Behavior);
			ownedTypes.add(type = _Stereotype);
			superClasses = type.getSuperClass();
			superClasses.add(_Class);
			ownedTypes.add(type = _StringLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_PrimitiveLiteralExp);
			ownedTypes.add(type = _TemplateBinding);
			superClasses = type.getSuperClass();
			superClasses.add(_Element);
			ownedTypes.add(type = _TemplateParameter);
			superClasses = type.getSuperClass();
			superClasses.add(_Element);
			ownedTypes.add(type = _TemplateParameterSubstitution);
			superClasses = type.getSuperClass();
			superClasses.add(_Element);
			ownedTypes.add(type = _TemplateParameterType);
			superClasses = type.getSuperClass();
			superClasses.add(_Type);
			ownedTypes.add(type = _TemplateSignature);
			superClasses = type.getSuperClass();
			superClasses.add(_Element);
			ownedTypes.add(type = _TemplateableElement);
			superClasses = type.getSuperClass();
			superClasses.add(_Element);
			ownedTypes.add(type = _Throwable);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			ownedTypes.add(type = _Transition);
			superClasses = type.getSuperClass();
			superClasses.add(_Namespace);
			ownedTypes.add(type = _Trigger);
			superClasses = type.getSuperClass();
			superClasses.add(_NamedElement);
			ownedTypes.add(type = _TupleLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_LiteralExp);
			ownedTypes.add(type = _TupleLiteralPart);
			superClasses = type.getSuperClass();
			superClasses.add(_VariableDeclaration);
			ownedTypes.add(type = _TupleType);
			superClasses = type.getSuperClass();
			superClasses.add(_DataType);
			ownedTypes.add(type = _Type);
			superClasses = type.getSuperClass();
			superClasses.add(_NamedElement);
			superClasses.add(_TemplateableElement);
			superClasses.add(_ParameterableElement);
			ownedTypes.add(type = _TypeExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OCLExpression);
			superClasses.add(_ReferringElement);
			ownedTypes.add(type = _TypeTemplateParameter);
			superClasses = type.getSuperClass();
			superClasses.add(_TemplateParameter);
			ownedTypes.add(type = _TypedElement);
			superClasses = type.getSuperClass();
			superClasses.add(_NamedElement);
			ownedTypes.add(type = _TypedMultiplicityElement);
			superClasses = type.getSuperClass();
			superClasses.add(_TypedElement);
			ownedTypes.add(type = _UnlimitedNaturalLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_NumericLiteralExp);
			ownedTypes.add(type = _UnspecifiedType);
			superClasses = type.getSuperClass();
			superClasses.add(_Class);
			ownedTypes.add(type = _UnspecifiedValueExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OCLExpression);
			ownedTypes.add(type = _ValueSpecification);
			superClasses = type.getSuperClass();
			superClasses.add(_TypedElement);
			superClasses.add(_ParameterableElement);
			ownedTypes.add(type = _Variable);
			superClasses = type.getSuperClass();
			superClasses.add(_VariableDeclaration);
			ownedTypes.add(type = _VariableDeclaration);
			superClasses = type.getSuperClass();
			superClasses.add(_TypedElement);
			ownedTypes.add(type = _VariableExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OCLExpression);
			superClasses.add(_ReferringElement);
			ownedTypes.add(type = _Vertex);
			superClasses = type.getSuperClass();
			superClasses.add(_NamedElement);
			ownedTypes.add(type = _Visitable);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			ownedTypes.add(type = _Visitor);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			ownedTypes.add(type = _VoidType);
			superClasses = type.getSuperClass();
			superClasses.add(_Class);
			ownedTypes.add(type = _$$);
		}

		protected void installPrimitiveTypes() {
			final List<Type> ownedTypes = metamodel.getOwnedType();
			PrimitiveType type;
		}

		protected void installEnumerations() {
			final List<Type> ownedTypes = metamodel.getOwnedType();
			Enumeration type;
			List<EnumerationLiteral> enumerationLiterals;
			ownedTypes.add(type = _AssociativityKind);
			enumerationLiterals = type.getOwnedLiteral();
			enumerationLiterals.add(el__AssociativityKind_Left);
			enumerationLiterals.add(el__AssociativityKind_Right);
			type.getSuperClass().add(_Enumeration);
			ownedTypes.add(type = _CollectionKind);
			enumerationLiterals = type.getOwnedLiteral();
			enumerationLiterals.add(el__CollectionKind_Collection);
			enumerationLiterals.add(el__CollectionKind_Set);
			enumerationLiterals.add(el__CollectionKind_OrderedSet);
			enumerationLiterals.add(el__CollectionKind_Bag);
			enumerationLiterals.add(el__CollectionKind_Sequence);
			type.getSuperClass().add(_Enumeration);
			ownedTypes.add(type = _PseudostateKind);
			enumerationLiterals = type.getOwnedLiteral();
			enumerationLiterals.add(el__PseudostateKind_initial);
			enumerationLiterals.add(el__PseudostateKind_deepHistory);
			enumerationLiterals.add(el__PseudostateKind_shallowHistory);
			enumerationLiterals.add(el__PseudostateKind_join);
			enumerationLiterals.add(el__PseudostateKind_fork);
			enumerationLiterals.add(el__PseudostateKind_junction);
			enumerationLiterals.add(el__PseudostateKind_choice);
			enumerationLiterals.add(el__PseudostateKind_entryPoint);
			enumerationLiterals.add(el__PseudostateKind_exitPoint);
			enumerationLiterals.add(el__PseudostateKind_terminate);
			type.getSuperClass().add(_Enumeration);
			ownedTypes.add(type = _TransitionKind);
			enumerationLiterals = type.getOwnedLiteral();
			enumerationLiterals.add(el__TransitionKind_internal);
			enumerationLiterals.add(el__TransitionKind_local);
			enumerationLiterals.add(el__TransitionKind_external);
			type.getSuperClass().add(_Enumeration);
		}

		protected void installParameterTypes() {
		}

		protected void installCollectionTypes() {
			final List<Type> ownedTypes = metamodel.getOwnedType();
			final List<Type> orphanTypes = pk_$$.getOwnedType();
			CollectionType type;
			List<Type> superClasses;
			orphanTypes.add(type = _Bag_AssociationClassCallExp);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_AssociationClassCallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_AssociationClassCallExp);
			orphanTypes.add(type = _Bag_Behavior);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_Behavior);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Behavior);
			orphanTypes.add(type = _Bag_CallOperationAction);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_CallOperationAction);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_CallOperationAction);
			orphanTypes.add(type = _Bag_CollectionType);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_CollectionType);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_CollectionType);
			orphanTypes.add(type = _Bag_Comment);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_Comment);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Comment);
			orphanTypes.add(type = _Bag_ConnectionPointReference);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_ConnectionPointReference);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_ConnectionPointReference);
			orphanTypes.add(type = _Bag_Constraint);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_Constraint);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Constraint);
			orphanTypes.add(type = _Bag_ConstructorPart);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_ConstructorPart);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_ConstructorPart);
			orphanTypes.add(type = _Bag_DataType);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_DataType);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_DataType);
			orphanTypes.add(type = _Bag_DynamicElement);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_DynamicElement);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_DynamicElement);
			orphanTypes.add(type = _Bag_DynamicProperty);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_DynamicProperty);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_DynamicProperty);
			orphanTypes.add(type = _Bag_ElementExtension);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_ElementExtension);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_ElementExtension);
			orphanTypes.add(type = _Bag_Element);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_Element);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Element);
			orphanTypes.add(type = _Bag_EnumLiteralExp);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_EnumLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_EnumLiteralExp);
			orphanTypes.add(type = _Bag_Import);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_Import);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Import);
			orphanTypes.add(type = _Bag_LoopExp);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_LoopExp);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_LoopExp);
			orphanTypes.add(type = _Bag_MessageType);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_MessageType);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_MessageType);
			orphanTypes.add(type = _Bag_Metaclass);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_Metaclass);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Metaclass);
			orphanTypes.add(type = _Bag_NavigationCallExp);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_NavigationCallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_NavigationCallExp);
			orphanTypes.add(type = _Bag_OperationCallExp);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_OperationCallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_OperationCallExp);
			orphanTypes.add(type = _Bag_Operation);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_Operation);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Operation);
			orphanTypes.add(type = _Bag_Package);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_Package);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Package);
			orphanTypes.add(type = _Bag_ParameterableElement);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_ParameterableElement);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_ParameterableElement);
			orphanTypes.add(type = _Bag_PropertyCallExp);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_PropertyCallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_PropertyCallExp);
			orphanTypes.add(type = _Bag_Property);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_Property);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Property);
			orphanTypes.add(type = _Bag_Pseudostate);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_Pseudostate);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Pseudostate);
			orphanTypes.add(type = _Bag_Region);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_Region);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Region);
			orphanTypes.add(type = _Bag_SendSignalAction);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_SendSignalAction);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_SendSignalAction);
			orphanTypes.add(type = _Bag_StateExp);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_StateExp);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_StateExp);
			orphanTypes.add(type = _Bag_StateMachine);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_StateMachine);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_StateMachine);
			orphanTypes.add(type = _Bag_State);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_State);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_State);
			orphanTypes.add(type = _Bag_String);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_String);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_String);
			orphanTypes.add(type = _Bag_TemplateBinding);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_TemplateBinding);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_TemplateBinding);
			orphanTypes.add(type = _Bag_TemplateParameterSubstitution);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_TemplateParameterSubstitution);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_TemplateParameterSubstitution);
			orphanTypes.add(type = _Bag_TemplateSignature);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_TemplateSignature);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_TemplateSignature);
			orphanTypes.add(type = _Bag_Transition);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_Transition);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Transition);
			orphanTypes.add(type = _Bag_Trigger);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_Trigger);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Trigger);
			orphanTypes.add(type = _Bag_TypeExp);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_TypeExp);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_TypeExp);
			orphanTypes.add(type = _Bag_TypeTemplateParameter);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_TypeTemplateParameter);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_TypeTemplateParameter);
			orphanTypes.add(type = _Bag_Type);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_Type);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Type);
			orphanTypes.add(type = _Bag_TypedElement);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_TypedElement);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_TypedElement);
			orphanTypes.add(type = _Bag_VariableExp);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_VariableExp);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_VariableExp);
			orphanTypes.add(type = _Bag_Variable);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_Variable);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Variable);
			orphanTypes.add(type = _Bag_Vertex);
			type.setUnspecializedElement(_Bag);
			type.setElementType(_Vertex);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Vertex);
			orphanTypes.add(type = _Collection_Annotation);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_Annotation);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_AssociationClassCallExp);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_AssociationClassCallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_Behavior);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_Behavior);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_CallOperationAction);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_CallOperationAction);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_Class);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_Class);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_CollectionLiteralPart);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_CollectionLiteralPart);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_CollectionType);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_CollectionType);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_Comment);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_Comment);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_ConnectionPointReference);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_ConnectionPointReference);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_Constraint);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_Constraint);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_ConstructorPart);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_ConstructorPart);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_DataType);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_DataType);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_Detail);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_Detail);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_DynamicElement);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_DynamicElement);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_DynamicProperty);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_DynamicProperty);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_ElementExtension);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_ElementExtension);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_Element);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_Element);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_EnumLiteralExp);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_EnumLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_EnumerationLiteral);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_EnumerationLiteral);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_Import);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_Import);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_LoopExp);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_LoopExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_MessageType);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_MessageType);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_Metaclass);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_Metaclass);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_NavigationCallExp);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_NavigationCallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_OCLExpression);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_OCLExpression);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_OperationCallExp);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_OperationCallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_Operation);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_Operation);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_Package);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_Package);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_Parameter);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_Parameter);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_ParameterableElement);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_ParameterableElement);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_Precedence);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_Precedence);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_PropertyCallExp);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_PropertyCallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_Property);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_Property);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_Pseudostate);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_Pseudostate);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_Region);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_Region);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_SendSignalAction);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_SendSignalAction);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_StateExp);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_StateExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_StateMachine);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_StateMachine);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_State);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_State);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_String);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_String);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_TemplateBinding);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_TemplateBinding);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_TemplateParameterSubstitution);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_TemplateParameterSubstitution);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_TemplateParameter);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_TemplateParameter);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_TemplateSignature);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_TemplateSignature);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_Transition);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_Transition);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_Trigger);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_Trigger);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_TupleLiteralPart);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_TupleLiteralPart);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_TypeExp);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_TypeExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_TypeTemplateParameter);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_TypeTemplateParameter);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_Type);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_Type);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_TypedElement);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_TypedElement);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_VariableExp);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_VariableExp);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_Variable);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_Variable);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _Collection_Vertex);
			type.setUnspecializedElement(_Collection);
			type.setElementType(_Vertex);
			superClasses = type.getSuperClass();
			superClasses.add(_OclElement);
			orphanTypes.add(type = _OrderedSet_Annotation);
			type.setUnspecializedElement(_OrderedSet);
			type.setElementType(_Annotation);
			superClasses = type.getSuperClass();
			superClasses.add(_Sequence_Annotation);
			superClasses.add(_UniqueCollection_Annotation);
			orphanTypes.add(type = _OrderedSet_Class);
			type.setUnspecializedElement(_OrderedSet);
			type.setElementType(_Class);
			superClasses = type.getSuperClass();
			superClasses.add(_Sequence_Class);
			superClasses.add(_UniqueCollection_Class);
			orphanTypes.add(type = _OrderedSet_CollectionLiteralPart);
			type.setUnspecializedElement(_OrderedSet);
			type.setElementType(_CollectionLiteralPart);
			superClasses = type.getSuperClass();
			superClasses.add(_Sequence_CollectionLiteralPart);
			superClasses.add(_UniqueCollection_CollectionLiteralPart);
			orphanTypes.add(type = _OrderedSet_Constraint);
			type.setUnspecializedElement(_OrderedSet);
			type.setElementType(_Constraint);
			superClasses = type.getSuperClass();
			superClasses.add(_Sequence_Constraint);
			superClasses.add(_UniqueCollection_Constraint);
			orphanTypes.add(type = _OrderedSet_ConstructorPart);
			type.setUnspecializedElement(_OrderedSet);
			type.setElementType(_ConstructorPart);
			superClasses = type.getSuperClass();
			superClasses.add(_Sequence_ConstructorPart);
			superClasses.add(_UniqueCollection_ConstructorPart);
			orphanTypes.add(type = _OrderedSet_Detail);
			type.setUnspecializedElement(_OrderedSet);
			type.setElementType(_Detail);
			superClasses = type.getSuperClass();
			superClasses.add(_Sequence_Detail);
			superClasses.add(_UniqueCollection_Detail);
			orphanTypes.add(type = _OrderedSet_Element);
			type.setUnspecializedElement(_OrderedSet);
			type.setElementType(_Element);
			superClasses = type.getSuperClass();
			superClasses.add(_Sequence_Element);
			superClasses.add(_UniqueCollection_Element);
			orphanTypes.add(type = _OrderedSet_EnumerationLiteral);
			type.setUnspecializedElement(_OrderedSet);
			type.setElementType(_EnumerationLiteral);
			superClasses = type.getSuperClass();
			superClasses.add(_Sequence_EnumerationLiteral);
			superClasses.add(_UniqueCollection_EnumerationLiteral);
			orphanTypes.add(type = _OrderedSet_Import);
			type.setUnspecializedElement(_OrderedSet);
			type.setElementType(_Import);
			superClasses = type.getSuperClass();
			superClasses.add(_Sequence_Import);
			superClasses.add(_UniqueCollection_Import);
			orphanTypes.add(type = _OrderedSet_OCLExpression);
			type.setUnspecializedElement(_OrderedSet);
			type.setElementType(_OCLExpression);
			superClasses = type.getSuperClass();
			superClasses.add(_Sequence_OCLExpression);
			superClasses.add(_UniqueCollection_OCLExpression);
			orphanTypes.add(type = _OrderedSet_Operation);
			type.setUnspecializedElement(_OrderedSet);
			type.setElementType(_Operation);
			superClasses = type.getSuperClass();
			superClasses.add(_Sequence_Operation);
			superClasses.add(_UniqueCollection_Operation);
			orphanTypes.add(type = _OrderedSet_Parameter);
			type.setUnspecializedElement(_OrderedSet);
			type.setElementType(_Parameter);
			superClasses = type.getSuperClass();
			superClasses.add(_Sequence_Parameter);
			superClasses.add(_UniqueCollection_Parameter);
			orphanTypes.add(type = _OrderedSet_Precedence);
			type.setUnspecializedElement(_OrderedSet);
			type.setElementType(_Precedence);
			superClasses = type.getSuperClass();
			superClasses.add(_Sequence_Precedence);
			superClasses.add(_UniqueCollection_Precedence);
			orphanTypes.add(type = _OrderedSet_Property);
			type.setUnspecializedElement(_OrderedSet);
			type.setElementType(_Property);
			superClasses = type.getSuperClass();
			superClasses.add(_Sequence_Property);
			superClasses.add(_UniqueCollection_Property);
			orphanTypes.add(type = _OrderedSet_String);
			type.setUnspecializedElement(_OrderedSet);
			type.setElementType(_String);
			superClasses = type.getSuperClass();
			superClasses.add(_Sequence_String);
			superClasses.add(_UniqueCollection_String);
			orphanTypes.add(type = _OrderedSet_TemplateParameter);
			type.setUnspecializedElement(_OrderedSet);
			type.setElementType(_TemplateParameter);
			superClasses = type.getSuperClass();
			superClasses.add(_Sequence_TemplateParameter);
			superClasses.add(_UniqueCollection_TemplateParameter);
			orphanTypes.add(type = _OrderedSet_TemplateParameter_1);
			type.setUnspecializedElement(_OrderedSet);
			type.setElementType(_TemplateParameter);
			superClasses = type.getSuperClass();
			superClasses.add(_Sequence_TemplateParameter);
			superClasses.add(_UniqueCollection_TemplateParameter);
			orphanTypes.add(type = _OrderedSet_TupleLiteralPart);
			type.setUnspecializedElement(_OrderedSet);
			type.setElementType(_TupleLiteralPart);
			superClasses = type.getSuperClass();
			superClasses.add(_Sequence_TupleLiteralPart);
			superClasses.add(_UniqueCollection_TupleLiteralPart);
			orphanTypes.add(type = _OrderedSet_Type);
			type.setUnspecializedElement(_OrderedSet);
			type.setElementType(_Type);
			superClasses = type.getSuperClass();
			superClasses.add(_Sequence_Type);
			superClasses.add(_UniqueCollection_Type);
			orphanTypes.add(type = _OrderedSet_Variable);
			type.setUnspecializedElement(_OrderedSet);
			type.setElementType(_Variable);
			superClasses = type.getSuperClass();
			superClasses.add(_Sequence_Variable);
			superClasses.add(_UniqueCollection_Variable);
			orphanTypes.add(type = _Sequence_Annotation);
			type.setUnspecializedElement(_Sequence);
			type.setElementType(_Annotation);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Annotation);
			orphanTypes.add(type = _Sequence_Class);
			type.setUnspecializedElement(_Sequence);
			type.setElementType(_Class);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Class);
			orphanTypes.add(type = _Sequence_CollectionLiteralPart);
			type.setUnspecializedElement(_Sequence);
			type.setElementType(_CollectionLiteralPart);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_CollectionLiteralPart);
			orphanTypes.add(type = _Sequence_Constraint);
			type.setUnspecializedElement(_Sequence);
			type.setElementType(_Constraint);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Constraint);
			orphanTypes.add(type = _Sequence_ConstructorPart);
			type.setUnspecializedElement(_Sequence);
			type.setElementType(_ConstructorPart);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_ConstructorPart);
			orphanTypes.add(type = _Sequence_Detail);
			type.setUnspecializedElement(_Sequence);
			type.setElementType(_Detail);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Detail);
			orphanTypes.add(type = _Sequence_Element);
			type.setUnspecializedElement(_Sequence);
			type.setElementType(_Element);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Element);
			orphanTypes.add(type = _Sequence_EnumerationLiteral);
			type.setUnspecializedElement(_Sequence);
			type.setElementType(_EnumerationLiteral);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_EnumerationLiteral);
			orphanTypes.add(type = _Sequence_Import);
			type.setUnspecializedElement(_Sequence);
			type.setElementType(_Import);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Import);
			orphanTypes.add(type = _Sequence_OCLExpression);
			type.setUnspecializedElement(_Sequence);
			type.setElementType(_OCLExpression);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_OCLExpression);
			orphanTypes.add(type = _Sequence_Operation);
			type.setUnspecializedElement(_Sequence);
			type.setElementType(_Operation);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Operation);
			orphanTypes.add(type = _Sequence_Parameter);
			type.setUnspecializedElement(_Sequence);
			type.setElementType(_Parameter);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Parameter);
			orphanTypes.add(type = _Sequence_Precedence);
			type.setUnspecializedElement(_Sequence);
			type.setElementType(_Precedence);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Precedence);
			orphanTypes.add(type = _Sequence_Property);
			type.setUnspecializedElement(_Sequence);
			type.setElementType(_Property);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Property);
			orphanTypes.add(type = _Sequence_String);
			type.setUnspecializedElement(_Sequence);
			type.setElementType(_String);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_String);
			orphanTypes.add(type = _Sequence_TemplateParameter);
			type.setUnspecializedElement(_Sequence);
			type.setElementType(_TemplateParameter);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_TemplateParameter);
			orphanTypes.add(type = _Sequence_TupleLiteralPart);
			type.setUnspecializedElement(_Sequence);
			type.setElementType(_TupleLiteralPart);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_TupleLiteralPart);
			orphanTypes.add(type = _Sequence_Type);
			type.setUnspecializedElement(_Sequence);
			type.setElementType(_Type);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Type);
			orphanTypes.add(type = _Sequence_Variable);
			type.setUnspecializedElement(_Sequence);
			type.setElementType(_Variable);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Variable);
			orphanTypes.add(type = _Set_AssociationClassCallExp);
			type.setUnspecializedElement(_Set);
			type.setElementType(_AssociationClassCallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_AssociationClassCallExp);
			superClasses.add(_UniqueCollection_AssociationClassCallExp);
			orphanTypes.add(type = _Set_Behavior);
			type.setUnspecializedElement(_Set);
			type.setElementType(_Behavior);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_Behavior);
			superClasses.add(_UniqueCollection_Behavior);
			orphanTypes.add(type = _Set_CallOperationAction);
			type.setUnspecializedElement(_Set);
			type.setElementType(_CallOperationAction);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_CallOperationAction);
			superClasses.add(_UniqueCollection_CallOperationAction);
			orphanTypes.add(type = _Set_CollectionType);
			type.setUnspecializedElement(_Set);
			type.setElementType(_CollectionType);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_CollectionType);
			superClasses.add(_UniqueCollection_CollectionType);
			orphanTypes.add(type = _Set_Comment);
			type.setUnspecializedElement(_Set);
			type.setElementType(_Comment);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_Comment);
			superClasses.add(_UniqueCollection_Comment);
			orphanTypes.add(type = _Set_ConnectionPointReference);
			type.setUnspecializedElement(_Set);
			type.setElementType(_ConnectionPointReference);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_ConnectionPointReference);
			superClasses.add(_UniqueCollection_ConnectionPointReference);
			orphanTypes.add(type = _Set_Constraint);
			type.setUnspecializedElement(_Set);
			type.setElementType(_Constraint);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_Constraint);
			superClasses.add(_UniqueCollection_Constraint);
			orphanTypes.add(type = _Set_ConstructorPart);
			type.setUnspecializedElement(_Set);
			type.setElementType(_ConstructorPart);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_ConstructorPart);
			superClasses.add(_UniqueCollection_ConstructorPart);
			orphanTypes.add(type = _Set_DataType);
			type.setUnspecializedElement(_Set);
			type.setElementType(_DataType);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_DataType);
			superClasses.add(_UniqueCollection_DataType);
			orphanTypes.add(type = _Set_DynamicElement);
			type.setUnspecializedElement(_Set);
			type.setElementType(_DynamicElement);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_DynamicElement);
			superClasses.add(_UniqueCollection_DynamicElement);
			orphanTypes.add(type = _Set_DynamicProperty);
			type.setUnspecializedElement(_Set);
			type.setElementType(_DynamicProperty);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_DynamicProperty);
			superClasses.add(_UniqueCollection_DynamicProperty);
			orphanTypes.add(type = _Set_ElementExtension);
			type.setUnspecializedElement(_Set);
			type.setElementType(_ElementExtension);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_ElementExtension);
			superClasses.add(_UniqueCollection_ElementExtension);
			orphanTypes.add(type = _Set_Element);
			type.setUnspecializedElement(_Set);
			type.setElementType(_Element);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_Element);
			superClasses.add(_UniqueCollection_Element);
			orphanTypes.add(type = _Set_EnumLiteralExp);
			type.setUnspecializedElement(_Set);
			type.setElementType(_EnumLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_EnumLiteralExp);
			superClasses.add(_UniqueCollection_EnumLiteralExp);
			orphanTypes.add(type = _Set_Import);
			type.setUnspecializedElement(_Set);
			type.setElementType(_Import);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_Import);
			superClasses.add(_UniqueCollection_Import);
			orphanTypes.add(type = _Set_LoopExp);
			type.setUnspecializedElement(_Set);
			type.setElementType(_LoopExp);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_LoopExp);
			superClasses.add(_UniqueCollection_LoopExp);
			orphanTypes.add(type = _Set_MessageType);
			type.setUnspecializedElement(_Set);
			type.setElementType(_MessageType);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_MessageType);
			superClasses.add(_UniqueCollection_MessageType);
			orphanTypes.add(type = _Set_Metaclass);
			type.setUnspecializedElement(_Set);
			type.setElementType(_Metaclass);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_Metaclass);
			superClasses.add(_UniqueCollection_Metaclass);
			orphanTypes.add(type = _Set_NavigationCallExp);
			type.setUnspecializedElement(_Set);
			type.setElementType(_NavigationCallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_NavigationCallExp);
			superClasses.add(_UniqueCollection_NavigationCallExp);
			orphanTypes.add(type = _Set_OperationCallExp);
			type.setUnspecializedElement(_Set);
			type.setElementType(_OperationCallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_OperationCallExp);
			superClasses.add(_UniqueCollection_OperationCallExp);
			orphanTypes.add(type = _Set_Operation);
			type.setUnspecializedElement(_Set);
			type.setElementType(_Operation);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_Operation);
			superClasses.add(_UniqueCollection_Operation);
			orphanTypes.add(type = _Set_Package);
			type.setUnspecializedElement(_Set);
			type.setElementType(_Package);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_Package);
			superClasses.add(_UniqueCollection_Package);
			orphanTypes.add(type = _Set_ParameterableElement);
			type.setUnspecializedElement(_Set);
			type.setElementType(_ParameterableElement);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_ParameterableElement);
			superClasses.add(_UniqueCollection_ParameterableElement);
			orphanTypes.add(type = _Set_PropertyCallExp);
			type.setUnspecializedElement(_Set);
			type.setElementType(_PropertyCallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_PropertyCallExp);
			superClasses.add(_UniqueCollection_PropertyCallExp);
			orphanTypes.add(type = _Set_Property);
			type.setUnspecializedElement(_Set);
			type.setElementType(_Property);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_Property);
			superClasses.add(_UniqueCollection_Property);
			orphanTypes.add(type = _Set_Pseudostate);
			type.setUnspecializedElement(_Set);
			type.setElementType(_Pseudostate);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_Pseudostate);
			superClasses.add(_UniqueCollection_Pseudostate);
			orphanTypes.add(type = _Set_Region);
			type.setUnspecializedElement(_Set);
			type.setElementType(_Region);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_Region);
			superClasses.add(_UniqueCollection_Region);
			orphanTypes.add(type = _Set_Region_1);
			type.setUnspecializedElement(_Set);
			type.setElementType(_Region);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_Region);
			superClasses.add(_UniqueCollection_Region);
			orphanTypes.add(type = _Set_SendSignalAction);
			type.setUnspecializedElement(_Set);
			type.setElementType(_SendSignalAction);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_SendSignalAction);
			superClasses.add(_UniqueCollection_SendSignalAction);
			orphanTypes.add(type = _Set_StateExp);
			type.setUnspecializedElement(_Set);
			type.setElementType(_StateExp);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_StateExp);
			superClasses.add(_UniqueCollection_StateExp);
			orphanTypes.add(type = _Set_StateMachine);
			type.setUnspecializedElement(_Set);
			type.setElementType(_StateMachine);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_StateMachine);
			superClasses.add(_UniqueCollection_StateMachine);
			orphanTypes.add(type = _Set_State);
			type.setUnspecializedElement(_Set);
			type.setElementType(_State);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_State);
			superClasses.add(_UniqueCollection_State);
			orphanTypes.add(type = _Set_String);
			type.setUnspecializedElement(_Set);
			type.setElementType(_String);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_String);
			superClasses.add(_UniqueCollection_String);
			orphanTypes.add(type = _Set_TemplateBinding);
			type.setUnspecializedElement(_Set);
			type.setElementType(_TemplateBinding);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_TemplateBinding);
			superClasses.add(_UniqueCollection_TemplateBinding);
			orphanTypes.add(type = _Set_TemplateParameterSubstitution);
			type.setUnspecializedElement(_Set);
			type.setElementType(_TemplateParameterSubstitution);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_TemplateParameterSubstitution);
			superClasses.add(_UniqueCollection_TemplateParameterSubstitution);
			orphanTypes.add(type = _Set_TemplateSignature);
			type.setUnspecializedElement(_Set);
			type.setElementType(_TemplateSignature);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_TemplateSignature);
			superClasses.add(_UniqueCollection_TemplateSignature);
			orphanTypes.add(type = _Set_Transition);
			type.setUnspecializedElement(_Set);
			type.setElementType(_Transition);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_Transition);
			superClasses.add(_UniqueCollection_Transition);
			orphanTypes.add(type = _Set_Trigger);
			type.setUnspecializedElement(_Set);
			type.setElementType(_Trigger);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_Trigger);
			superClasses.add(_UniqueCollection_Trigger);
			orphanTypes.add(type = _Set_TypeExp);
			type.setUnspecializedElement(_Set);
			type.setElementType(_TypeExp);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_TypeExp);
			superClasses.add(_UniqueCollection_TypeExp);
			orphanTypes.add(type = _Set_TypeTemplateParameter);
			type.setUnspecializedElement(_Set);
			type.setElementType(_TypeTemplateParameter);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_TypeTemplateParameter);
			superClasses.add(_UniqueCollection_TypeTemplateParameter);
			orphanTypes.add(type = _Set_Type);
			type.setUnspecializedElement(_Set);
			type.setElementType(_Type);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_Type);
			superClasses.add(_UniqueCollection_Type);
			orphanTypes.add(type = _Set_TypedElement);
			type.setUnspecializedElement(_Set);
			type.setElementType(_TypedElement);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_TypedElement);
			superClasses.add(_UniqueCollection_TypedElement);
			orphanTypes.add(type = _Set_VariableExp);
			type.setUnspecializedElement(_Set);
			type.setElementType(_VariableExp);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_VariableExp);
			superClasses.add(_UniqueCollection_VariableExp);
			orphanTypes.add(type = _Set_Variable);
			type.setUnspecializedElement(_Set);
			type.setElementType(_Variable);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_Variable);
			superClasses.add(_UniqueCollection_Variable);
			orphanTypes.add(type = _Set_Vertex);
			type.setUnspecializedElement(_Set);
			type.setElementType(_Vertex);
			superClasses = type.getSuperClass();
			superClasses.add(_Bag_Vertex);
			superClasses.add(_UniqueCollection_Vertex);
			orphanTypes.add(type = _UniqueCollection_Annotation);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_Annotation);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Annotation);
			orphanTypes.add(type = _UniqueCollection_AssociationClassCallExp);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_AssociationClassCallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_AssociationClassCallExp);
			orphanTypes.add(type = _UniqueCollection_Behavior);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_Behavior);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Behavior);
			orphanTypes.add(type = _UniqueCollection_CallOperationAction);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_CallOperationAction);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_CallOperationAction);
			orphanTypes.add(type = _UniqueCollection_Class);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_Class);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Class);
			orphanTypes.add(type = _UniqueCollection_CollectionLiteralPart);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_CollectionLiteralPart);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_CollectionLiteralPart);
			orphanTypes.add(type = _UniqueCollection_CollectionType);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_CollectionType);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_CollectionType);
			orphanTypes.add(type = _UniqueCollection_Comment);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_Comment);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Comment);
			orphanTypes.add(type = _UniqueCollection_ConnectionPointReference);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_ConnectionPointReference);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_ConnectionPointReference);
			orphanTypes.add(type = _UniqueCollection_Constraint);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_Constraint);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Constraint);
			orphanTypes.add(type = _UniqueCollection_ConstructorPart);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_ConstructorPart);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_ConstructorPart);
			orphanTypes.add(type = _UniqueCollection_DataType);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_DataType);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_DataType);
			orphanTypes.add(type = _UniqueCollection_Detail);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_Detail);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Detail);
			orphanTypes.add(type = _UniqueCollection_DynamicElement);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_DynamicElement);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_DynamicElement);
			orphanTypes.add(type = _UniqueCollection_DynamicProperty);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_DynamicProperty);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_DynamicProperty);
			orphanTypes.add(type = _UniqueCollection_ElementExtension);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_ElementExtension);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_ElementExtension);
			orphanTypes.add(type = _UniqueCollection_Element);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_Element);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Element);
			orphanTypes.add(type = _UniqueCollection_EnumLiteralExp);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_EnumLiteralExp);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_EnumLiteralExp);
			orphanTypes.add(type = _UniqueCollection_EnumerationLiteral);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_EnumerationLiteral);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_EnumerationLiteral);
			orphanTypes.add(type = _UniqueCollection_Import);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_Import);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Import);
			orphanTypes.add(type = _UniqueCollection_LoopExp);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_LoopExp);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_LoopExp);
			orphanTypes.add(type = _UniqueCollection_MessageType);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_MessageType);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_MessageType);
			orphanTypes.add(type = _UniqueCollection_Metaclass);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_Metaclass);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Metaclass);
			orphanTypes.add(type = _UniqueCollection_NavigationCallExp);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_NavigationCallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_NavigationCallExp);
			orphanTypes.add(type = _UniqueCollection_OCLExpression);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_OCLExpression);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_OCLExpression);
			orphanTypes.add(type = _UniqueCollection_OperationCallExp);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_OperationCallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_OperationCallExp);
			orphanTypes.add(type = _UniqueCollection_Operation);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_Operation);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Operation);
			orphanTypes.add(type = _UniqueCollection_Package);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_Package);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Package);
			orphanTypes.add(type = _UniqueCollection_Parameter);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_Parameter);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Parameter);
			orphanTypes.add(type = _UniqueCollection_ParameterableElement);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_ParameterableElement);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_ParameterableElement);
			orphanTypes.add(type = _UniqueCollection_Precedence);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_Precedence);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Precedence);
			orphanTypes.add(type = _UniqueCollection_PropertyCallExp);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_PropertyCallExp);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_PropertyCallExp);
			orphanTypes.add(type = _UniqueCollection_Property);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_Property);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Property);
			orphanTypes.add(type = _UniqueCollection_Pseudostate);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_Pseudostate);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Pseudostate);
			orphanTypes.add(type = _UniqueCollection_Region);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_Region);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Region);
			orphanTypes.add(type = _UniqueCollection_SendSignalAction);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_SendSignalAction);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_SendSignalAction);
			orphanTypes.add(type = _UniqueCollection_StateExp);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_StateExp);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_StateExp);
			orphanTypes.add(type = _UniqueCollection_StateMachine);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_StateMachine);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_StateMachine);
			orphanTypes.add(type = _UniqueCollection_State);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_State);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_State);
			orphanTypes.add(type = _UniqueCollection_String);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_String);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_String);
			orphanTypes.add(type = _UniqueCollection_TemplateBinding);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_TemplateBinding);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_TemplateBinding);
			orphanTypes.add(type = _UniqueCollection_TemplateParameterSubstitution);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_TemplateParameterSubstitution);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_TemplateParameterSubstitution);
			orphanTypes.add(type = _UniqueCollection_TemplateParameter);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_TemplateParameter);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_TemplateParameter);
			orphanTypes.add(type = _UniqueCollection_TemplateSignature);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_TemplateSignature);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_TemplateSignature);
			orphanTypes.add(type = _UniqueCollection_Transition);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_Transition);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Transition);
			orphanTypes.add(type = _UniqueCollection_Trigger);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_Trigger);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Trigger);
			orphanTypes.add(type = _UniqueCollection_TupleLiteralPart);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_TupleLiteralPart);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_TupleLiteralPart);
			orphanTypes.add(type = _UniqueCollection_TypeExp);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_TypeExp);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_TypeExp);
			orphanTypes.add(type = _UniqueCollection_TypeTemplateParameter);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_TypeTemplateParameter);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_TypeTemplateParameter);
			orphanTypes.add(type = _UniqueCollection_Type);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_Type);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Type);
			orphanTypes.add(type = _UniqueCollection_TypedElement);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_TypedElement);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_TypedElement);
			orphanTypes.add(type = _UniqueCollection_VariableExp);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_VariableExp);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_VariableExp);
			orphanTypes.add(type = _UniqueCollection_Variable);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_Variable);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Variable);
			orphanTypes.add(type = _UniqueCollection_Vertex);
			type.setUnspecializedElement(_UniqueCollection);
			type.setElementType(_Vertex);
			superClasses = type.getSuperClass();
			superClasses.add(_Collection_Vertex);
		}

		protected final @NonNull Operation op_Element_allOwnedElements = createOperation("allOwnedElements", _Set_Element, null, null);
		protected final @NonNull Operation op_Element_getValue = createOperation("getValue", _Element, null, null);
		protected final @NonNull Operation op_ParameterableElement_isCompatibleWith = createOperation("isCompatibleWith", _Boolean, null, null);
		protected final @NonNull Operation op_ParameterableElement_isTemplateParameter = createOperation("isTemplateParameter", _Boolean, null, null);
		protected final @NonNull Operation op_Property_isAttribute = createOperation("isAttribute", _Boolean, null, null);
		protected final @NonNull Operation op_PropertyCallExp_getSpecializedReferredPropertyOwningType = createOperation("getSpecializedReferredPropertyOwningType", _Type, null, null);
		protected final @NonNull Operation op_PropertyCallExp_getSpecializedReferredPropertyType = createOperation("getSpecializedReferredPropertyType", _Type, null, null);
		protected final @NonNull Operation op_ReferringElement_getReferredElement = createOperation("getReferredElement", _Element, null, null);
		protected final @NonNull Operation op_SelfType_specializeIn = createOperation("specializeIn", _Type, null, null);
		protected final @NonNull Operation op_TemplateableElement_isTemplate = createOperation("isTemplate", _Boolean, null, null);
		protected final @NonNull Operation op_TemplateableElement_parameterableElements = createOperation("parameterableElements", _Set_ParameterableElement, null, null);
		protected final @NonNull Operation op_null_isTemplate = createOperation("isTemplate", _Boolean, null, null);
		protected final @NonNull Operation op_Type_specializeIn = createOperation("specializeIn", _Type, null, null);
		protected final @NonNull Operation op_TypedMultiplicityElement_CompatibleBody = createOperation("CompatibleBody", _Boolean, null, null);
		protected final @NonNull Operation op_TypedMultiplicityElement_makeParameter = createOperation("makeParameter", _Parameter, null, null);
		protected final @NonNull Operation op_ValueSpecification_booleanValue = createOperation("booleanValue", _Boolean, null, null);
		protected final @NonNull Operation op_ValueSpecification_integerValue = createOperation("integerValue", _Integer, null, null);
		protected final @NonNull Operation op_ValueSpecification_isComputable = createOperation("isComputable", _Boolean, null, null);
		protected final @NonNull Operation op_ValueSpecification_isNull = createOperation("isNull", _Boolean, null, null);
		protected final @NonNull Operation op_ValueSpecification_stringValue = createOperation("stringValue", _String, null, null);
		protected final @NonNull Operation op_ValueSpecification_unlimitedValue = createOperation("unlimitedValue", _UnlimitedNatural, null, null);
		
		protected void installOperations() {
			List<Operation> ownedOperations;
			List<Parameter> ownedParameters;
			Operation operation;
			Parameter parameter;
			ownedOperations = _Element.getOwnedOperation();
			ownedOperations.add(operation = op_Element_allOwnedElements);
			ownedOperations.add(operation = op_Element_getValue);
			operation.setIsRequired(false);
			ownedParameters = operation.getOwnedParameter();
			ownedParameters.add(parameter = createParameter("stereotype", _Type, true));
			ownedParameters.add(parameter = createParameter("propertyName", _String, true));
			ownedOperations = _ParameterableElement.getOwnedOperation();
			ownedOperations.add(operation = op_ParameterableElement_isCompatibleWith);
			ownedParameters = operation.getOwnedParameter();
			ownedParameters.add(parameter = createParameter("p", _ParameterableElement, true));
			ownedOperations.add(operation = op_ParameterableElement_isTemplateParameter);
			ownedOperations = _Property.getOwnedOperation();
			ownedOperations.add(operation = op_Property_isAttribute);
			ownedParameters = operation.getOwnedParameter();
			ownedParameters.add(parameter = createParameter("p", _Property, true));
			ownedOperations = _PropertyCallExp.getOwnedOperation();
			ownedOperations.add(operation = op_PropertyCallExp_getSpecializedReferredPropertyOwningType);
			ownedOperations.add(operation = op_PropertyCallExp_getSpecializedReferredPropertyType);
			ownedOperations = _ReferringElement.getOwnedOperation();
			ownedOperations.add(operation = op_ReferringElement_getReferredElement);
			ownedOperations = _SelfType.getOwnedOperation();
			ownedOperations.add(operation = op_SelfType_specializeIn);
			ownedParameters = operation.getOwnedParameter();
			ownedParameters.add(parameter = createParameter("expr", _OCLExpression, true));
			ownedParameters.add(parameter = createParameter("selfType", _Type, true));
			ownedOperations = _TemplateableElement.getOwnedOperation();
			ownedOperations.add(operation = op_TemplateableElement_isTemplate);
			ownedOperations.add(operation = op_TemplateableElement_parameterableElements);
			ownedOperations = _Type.getOwnedOperation();
			ownedOperations.add(operation = op_Type_specializeIn);
			ownedParameters = operation.getOwnedParameter();
			ownedParameters.add(parameter = createParameter("expr", _OCLExpression, true));
			ownedParameters.add(parameter = createParameter("selfType", _Type, true));
			ownedOperations = _TypedMultiplicityElement.getOwnedOperation();
			ownedOperations.add(operation = op_TypedMultiplicityElement_CompatibleBody);
			ownedParameters = operation.getOwnedParameter();
			ownedParameters.add(parameter = createParameter("bodySpecification", _ValueSpecification, true));
			ownedOperations.add(operation = op_TypedMultiplicityElement_makeParameter);
			ownedOperations = _ValueSpecification.getOwnedOperation();
			ownedOperations.add(operation = op_ValueSpecification_booleanValue);
			ownedOperations.add(operation = op_ValueSpecification_integerValue);
			ownedOperations.add(operation = op_ValueSpecification_isComputable);
			ownedOperations.add(operation = op_ValueSpecification_isNull);
			ownedOperations.add(operation = op_ValueSpecification_stringValue);
			ownedOperations.add(operation = op_ValueSpecification_unlimitedValue);
		}

		protected void installIterations() {
			List<Operation> ownedIterations;
			List<Parameter> ownedParameters;
			Iteration iteration;
			Parameter parameter;
		}

		protected final @NonNull Property pr_Annotation_NamedElement = createProperty("NamedElement", _NamedElement);
		protected final @NonNull Property pr_Annotation_ownedContent = createProperty(PivotPackage.Literals.ANNOTATION__OWNED_CONTENT, _OrderedSet_Element);
		protected final @NonNull Property pr_Annotation_ownedDetail = createProperty(PivotPackage.Literals.ANNOTATION__OWNED_DETAIL, _OrderedSet_Detail);
		protected final @NonNull Property pr_Annotation_reference = createProperty(PivotPackage.Literals.ANNOTATION__REFERENCE, _OrderedSet_Element);
		protected final @NonNull Property pr_AssociationClass_AssociationClassCallExp = createProperty("AssociationClassCallExp", _Set_AssociationClassCallExp);
		protected final @NonNull Property pr_AssociationClass_unownedAttribute = createProperty(PivotPackage.Literals.ASSOCIATION_CLASS__UNOWNED_ATTRIBUTE, _Set_Property);
		protected final @NonNull Property pr_AssociationClassCallExp_referredAssociationClass = createProperty(PivotPackage.Literals.ASSOCIATION_CLASS_CALL_EXP__REFERRED_ASSOCIATION_CLASS, _AssociationClass);
		protected final @NonNull Property pr_Behavior_Class = createProperty("Class", _Class);
		protected final @NonNull Property pr_Behavior_Transition = createProperty("Transition", _Transition);
		protected final @NonNull Property pr_BooleanLiteralExp_booleanSymbol = createProperty(PivotPackage.Literals.BOOLEAN_LITERAL_EXP__BOOLEAN_SYMBOL, _Boolean);
		protected final @NonNull Property pr_CallExp_implicit = createProperty(PivotPackage.Literals.CALL_EXP__IMPLICIT, _Boolean);
		protected final @NonNull Property pr_CallExp_source = createProperty(PivotPackage.Literals.CALL_EXP__SOURCE, _OCLExpression);
		protected final @NonNull Property pr_CallOperationAction_MessageExp = createProperty("MessageExp", _MessageExp);
		protected final @NonNull Property pr_CallOperationAction_operation = createProperty(PivotPackage.Literals.CALL_OPERATION_ACTION__OPERATION, _Operation);
		protected final @NonNull Property pr_Class_isAbstract = createProperty(PivotPackage.Literals.CLASS__IS_ABSTRACT, _Boolean);
		protected final @NonNull Property pr_Class_isInterface = createProperty(PivotPackage.Literals.CLASS__IS_INTERFACE, _Boolean);
		protected final @NonNull Property pr_Class_ownedBehavior = createProperty(PivotPackage.Literals.CLASS__OWNED_BEHAVIOR, _Set_Behavior);
		protected final @NonNull Property pr_CollectionItem_item = createProperty(PivotPackage.Literals.COLLECTION_ITEM__ITEM, _OCLExpression);
		protected final @NonNull Property pr_CollectionLiteralExp_kind = createProperty(PivotPackage.Literals.COLLECTION_LITERAL_EXP__KIND, _CollectionKind);
		protected final @NonNull Property pr_CollectionLiteralExp_part = createProperty(PivotPackage.Literals.COLLECTION_LITERAL_EXP__PART, _OrderedSet_CollectionLiteralPart);
		protected final @NonNull Property pr_CollectionLiteralPart_CollectionLiteralExp = createProperty("CollectionLiteralExp", _CollectionLiteralExp);
		protected final @NonNull Property pr_CollectionRange_first = createProperty(PivotPackage.Literals.COLLECTION_RANGE__FIRST, _OCLExpression);
		protected final @NonNull Property pr_CollectionRange_last = createProperty(PivotPackage.Literals.COLLECTION_RANGE__LAST, _OCLExpression);
		protected final @NonNull Property pr_CollectionType_elementType = createProperty(PivotPackage.Literals.COLLECTION_TYPE__ELEMENT_TYPE, _Type);
		protected final @NonNull Property pr_CollectionType_lower = createProperty(PivotPackage.Literals.COLLECTION_TYPE__LOWER, _Integer);
		protected final @NonNull Property pr_CollectionType_upper = createProperty(PivotPackage.Literals.COLLECTION_TYPE__UPPER, _UnlimitedNatural);
		protected final @NonNull Property pr_Comment_Element = createProperty("Element", _Element);
		protected final @NonNull Property pr_Comment_annotatedElement = createProperty(PivotPackage.Literals.COMMENT__ANNOTATED_ELEMENT, _Set_Element);
		protected final @NonNull Property pr_Comment_body = createProperty(PivotPackage.Literals.COMMENT__BODY, _String);
		protected final @NonNull Property pr_ConnectionPointReference_State = createProperty("State", _State);
		protected final @NonNull Property pr_ConnectionPointReference_entry = createProperty(PivotPackage.Literals.CONNECTION_POINT_REFERENCE__ENTRY, _Set_Pseudostate);
		protected final @NonNull Property pr_ConnectionPointReference_exit = createProperty(PivotPackage.Literals.CONNECTION_POINT_REFERENCE__EXIT, _Set_Pseudostate);
		protected final @NonNull Property pr_ConnectionPointReference_state = createProperty(PivotPackage.Literals.CONNECTION_POINT_REFERENCE__STATE, _State);
		protected final @NonNull Property pr_Constraint_Namespace = createProperty("Namespace", _Namespace);
		protected final @NonNull Property pr_Constraint_State = createProperty("State", _State);
		protected final @NonNull Property pr_Constraint_Transition = createProperty("Transition", _Transition);
		protected final @NonNull Property pr_Constraint_Type = createProperty("Type", _Type);
		protected final @NonNull Property pr_Constraint_constrainedElement = createProperty(PivotPackage.Literals.CONSTRAINT__CONSTRAINED_ELEMENT, _OrderedSet_Element);
		protected final @NonNull Property pr_Constraint_context = createProperty(PivotPackage.Literals.CONSTRAINT__CONTEXT, _Namespace);
		protected final @NonNull Property pr_Constraint_isCallable = createProperty(PivotPackage.Literals.CONSTRAINT__IS_CALLABLE, _Boolean);
		protected final @NonNull Property pr_Constraint_specification = createProperty(PivotPackage.Literals.CONSTRAINT__SPECIFICATION, _OpaqueExpression);
		protected final @NonNull Property pr_ConstructorExp_part = createProperty(PivotPackage.Literals.CONSTRUCTOR_EXP__PART, _OrderedSet_ConstructorPart);
		protected final @NonNull Property pr_ConstructorExp_value = createProperty(PivotPackage.Literals.CONSTRUCTOR_EXP__VALUE, _String);
		protected final @NonNull Property pr_ConstructorPart_ConstructorExp = createProperty("ConstructorExp", _ConstructorExp);
		protected final @NonNull Property pr_ConstructorPart_initExpression = createProperty(PivotPackage.Literals.CONSTRUCTOR_PART__INIT_EXPRESSION, _OCLExpression);
		protected final @NonNull Property pr_ConstructorPart_referredProperty = createProperty(PivotPackage.Literals.CONSTRUCTOR_PART__REFERRED_PROPERTY, _Property);
		protected final @NonNull Property pr_DataType_behavioralType = createProperty(PivotPackage.Literals.DATA_TYPE__BEHAVIORAL_TYPE, _Type);
		protected final @NonNull Property pr_DataType_isSerializable = createProperty(PivotPackage.Literals.DATA_TYPE__IS_SERIALIZABLE, _Boolean);
		protected final @NonNull Property pr_Detail_Annotation = createProperty("Annotation", _Annotation);
		protected final @NonNull Property pr_Detail_value = createProperty(PivotPackage.Literals.DETAIL__VALUE, _Set_String);
		protected final @NonNull Property pr_DynamicElement_metaType = createProperty(PivotPackage.Literals.DYNAMIC_ELEMENT__META_TYPE, _Type);
		protected final @NonNull Property pr_DynamicProperty_DynamicType = createProperty("DynamicType", _DynamicType);
		protected final @NonNull Property pr_DynamicProperty_default = createProperty(PivotPackage.Literals.DYNAMIC_PROPERTY__DEFAULT, _String);
		protected final @NonNull Property pr_DynamicProperty_referredProperty = createProperty(PivotPackage.Literals.DYNAMIC_PROPERTY__REFERRED_PROPERTY, _Property);
		protected final @NonNull Property pr_DynamicType_ownedProperty = createProperty(PivotPackage.Literals.DYNAMIC_TYPE__OWNED_PROPERTY, _Set_DynamicProperty);
		protected final @NonNull Property pr_Element_Comment = createProperty("Comment", _Set_Comment);
		protected final @NonNull Property pr_Element_Constraint = createProperty("Constraint", _Set_Constraint);
		protected final @NonNull Property pr_Element_extension = createProperty(PivotPackage.Literals.ELEMENT__EXTENSION, _Set_ElementExtension);
		protected final @NonNull Property pr_Element_ownedComment = createProperty(PivotPackage.Literals.ELEMENT__OWNED_COMMENT, _Set_Comment);
		protected final @NonNull Property pr_ElementExtension_base = createProperty(PivotPackage.Literals.ELEMENT_EXTENSION__BASE, _Element);
		protected final @NonNull Property pr_ElementExtension_stereotype = createProperty(PivotPackage.Literals.ELEMENT_EXTENSION__STEREOTYPE, _Type);
		protected final @NonNull Property pr_EnumLiteralExp_referredEnumLiteral = createProperty(PivotPackage.Literals.ENUM_LITERAL_EXP__REFERRED_ENUM_LITERAL, _EnumerationLiteral);
		protected final @NonNull Property pr_Enumeration_ownedLiteral = createProperty(PivotPackage.Literals.ENUMERATION__OWNED_LITERAL, _OrderedSet_EnumerationLiteral);
		protected final @NonNull Property pr_EnumerationLiteral_EnumLiteralExp = createProperty("EnumLiteralExp", _Set_EnumLiteralExp);
		protected final @NonNull Property pr_EnumerationLiteral_enumeration = createProperty(PivotPackage.Literals.ENUMERATION_LITERAL__ENUMERATION, _Enumeration);
		protected final @NonNull Property pr_EnumerationLiteral_value = createProperty(PivotPackage.Literals.ENUMERATION_LITERAL__VALUE, _Integer);
		protected final @NonNull Property pr_ExpressionInOCL_bodyExpression = createProperty(PivotPackage.Literals.EXPRESSION_IN_OCL__BODY_EXPRESSION, _OCLExpression);
		protected final @NonNull Property pr_ExpressionInOCL_contextVariable = createProperty(PivotPackage.Literals.EXPRESSION_IN_OCL__CONTEXT_VARIABLE, _Variable);
		protected final @NonNull Property pr_ExpressionInOCL_messageExpression = createProperty(PivotPackage.Literals.EXPRESSION_IN_OCL__MESSAGE_EXPRESSION, _OCLExpression);
		protected final @NonNull Property pr_ExpressionInOCL_parameterVariable = createProperty(PivotPackage.Literals.EXPRESSION_IN_OCL__PARAMETER_VARIABLE, _OrderedSet_Variable);
		protected final @NonNull Property pr_ExpressionInOCL_resultVariable = createProperty(PivotPackage.Literals.EXPRESSION_IN_OCL__RESULT_VARIABLE, _Variable);
		protected final @NonNull Property pr_Feature_implementation = createProperty(PivotPackage.Literals.FEATURE__IMPLEMENTATION, _LibraryFeature);
		protected final @NonNull Property pr_Feature_implementationClass = createProperty(PivotPackage.Literals.FEATURE__IMPLEMENTATION_CLASS, _String);
		protected final @NonNull Property pr_FeatureCallExp_isPre = createProperty(PivotPackage.Literals.FEATURE_CALL_EXP__IS_PRE, _Boolean);
		protected final @NonNull Property pr_IfExp_condition = createProperty(PivotPackage.Literals.IF_EXP__CONDITION, _OCLExpression);
		protected final @NonNull Property pr_IfExp_elseExpression = createProperty(PivotPackage.Literals.IF_EXP__ELSE_EXPRESSION, _OCLExpression);
		protected final @NonNull Property pr_IfExp_thenExpression = createProperty(PivotPackage.Literals.IF_EXP__THEN_EXPRESSION, _OCLExpression);
		protected final @NonNull Property pr_Import_Root = createProperty("Root", _Root);
		protected final @NonNull Property pr_Import_importedNamespace = createProperty(PivotPackage.Literals.IMPORT__IMPORTED_NAMESPACE, _Namespace);
		protected final @NonNull Property pr_IntegerLiteralExp_integerSymbol = createProperty(PivotPackage.Literals.INTEGER_LITERAL_EXP__INTEGER_SYMBOL, _Integer);
		protected final @NonNull Property pr_IterateExp_result = createProperty(PivotPackage.Literals.ITERATE_EXP__RESULT, _Variable);
		protected final @NonNull Property pr_Iteration_LoopExp = createProperty("LoopExp", _Set_LoopExp);
		protected final @NonNull Property pr_Iteration_ownedAccumulator = createProperty(PivotPackage.Literals.ITERATION__OWNED_ACCUMULATOR, _OrderedSet_Parameter);
		protected final @NonNull Property pr_Iteration_ownedIterator = createProperty(PivotPackage.Literals.ITERATION__OWNED_ITERATOR, _OrderedSet_Parameter);
		protected final @NonNull Property pr_LambdaType_contextType = createProperty(PivotPackage.Literals.LAMBDA_TYPE__CONTEXT_TYPE, _Type);
		protected final @NonNull Property pr_LambdaType_parameterType = createProperty(PivotPackage.Literals.LAMBDA_TYPE__PARAMETER_TYPE, _Sequence_Type);
		protected final @NonNull Property pr_LambdaType_resultType = createProperty(PivotPackage.Literals.LAMBDA_TYPE__RESULT_TYPE, _Type);
		protected final @NonNull Property pr_LetExp_in = createProperty(PivotPackage.Literals.LET_EXP__IN, _OCLExpression);
		protected final @NonNull Property pr_LetExp_variable = createProperty(PivotPackage.Literals.LET_EXP__VARIABLE, _Variable);
		protected final @NonNull Property pr_Library_ownedPrecedence = createProperty(PivotPackage.Literals.LIBRARY__OWNED_PRECEDENCE, _OrderedSet_Precedence);
		protected final @NonNull Property pr_LoopExp_body = createProperty(PivotPackage.Literals.LOOP_EXP__BODY, _OCLExpression);
		protected final @NonNull Property pr_LoopExp_iterator = createProperty(PivotPackage.Literals.LOOP_EXP__ITERATOR, _OrderedSet_Variable);
		protected final @NonNull Property pr_LoopExp_referredIteration = createProperty(PivotPackage.Literals.LOOP_EXP__REFERRED_ITERATION, _Iteration);
		protected final @NonNull Property pr_MessageExp_argument = createProperty(PivotPackage.Literals.MESSAGE_EXP__ARGUMENT, _OrderedSet_OCLExpression);
		protected final @NonNull Property pr_MessageExp_calledOperation = createProperty(PivotPackage.Literals.MESSAGE_EXP__CALLED_OPERATION, _CallOperationAction);
		protected final @NonNull Property pr_MessageExp_sentSignal = createProperty(PivotPackage.Literals.MESSAGE_EXP__SENT_SIGNAL, _SendSignalAction);
		protected final @NonNull Property pr_MessageExp_target = createProperty(PivotPackage.Literals.MESSAGE_EXP__TARGET, _OCLExpression);
		protected final @NonNull Property pr_MessageType_referredOperation = createProperty(PivotPackage.Literals.MESSAGE_TYPE__REFERRED_OPERATION, _Operation);
		protected final @NonNull Property pr_MessageType_referredSignal = createProperty(PivotPackage.Literals.MESSAGE_TYPE__REFERRED_SIGNAL, _Signal);
		protected final @NonNull Property pr_Metaclass_instanceType = createProperty(PivotPackage.Literals.METACLASS__INSTANCE_TYPE, _Type);
		protected final @NonNull Property pr_NamedElement_isStatic = createProperty(PivotPackage.Literals.NAMED_ELEMENT__IS_STATIC, _Boolean);
		protected final @NonNull Property pr_NamedElement_name = createProperty(PivotPackage.Literals.NAMED_ELEMENT__NAME, _String);
		protected final @NonNull Property pr_NamedElement_ownedAnnotation = createProperty(PivotPackage.Literals.NAMED_ELEMENT__OWNED_ANNOTATION, _OrderedSet_Annotation);
		protected final @NonNull Property pr_Namespace_Constraint = createProperty("Constraint", _Set_Constraint);
		protected final @NonNull Property pr_Namespace_Import = createProperty("Import", _Set_Import);
		protected final @NonNull Property pr_Namespace_ownedRule = createProperty(PivotPackage.Literals.NAMESPACE__OWNED_RULE, _OrderedSet_Constraint);
		protected final @NonNull Property pr_NavigationCallExp_navigationSource = createProperty(PivotPackage.Literals.NAVIGATION_CALL_EXP__NAVIGATION_SOURCE, _Property);
		protected final @NonNull Property pr_NavigationCallExp_qualifier = createProperty(PivotPackage.Literals.NAVIGATION_CALL_EXP__QUALIFIER, _OrderedSet_OCLExpression);
		protected final @NonNull Property pr_OCLExpression_CallExp = createProperty("CallExp", _CallExp);
		protected final @NonNull Property pr_OCLExpression_CollectionItem = createProperty("CollectionItem", _CollectionItem);
		protected final @NonNull Property pr_OCLExpression_ConstructorPart = createProperty("ConstructorPart", _ConstructorPart);
		protected final @NonNull Property pr_OCLExpression_LetExp = createProperty("LetExp", _LetExp);
		protected final @NonNull Property pr_OCLExpression_LoopExp = createProperty("LoopExp", _LoopExp);
		protected final @NonNull Property pr_OCLExpression_NavigationCallExp = createProperty("NavigationCallExp", _Set_NavigationCallExp);
		protected final @NonNull Property pr_OCLExpression_OperationCallExp = createProperty("OperationCallExp", _OperationCallExp);
		protected final @NonNull Property pr_OCLExpression_TupleLiteralPart = createProperty("TupleLiteralPart", _TupleLiteralPart);
		protected final @NonNull Property pr_OCLExpression_Variable = createProperty("Variable", _Variable);
		protected final @NonNull Property pr_OpaqueExpression_Constraint = createProperty("Constraint", _Constraint);
		protected final @NonNull Property pr_OpaqueExpression_Operation = createProperty("Operation", _Operation);
		protected final @NonNull Property pr_OpaqueExpression_Property = createProperty("Property", _Property);
		protected final @NonNull Property pr_OpaqueExpression_body = createProperty(PivotPackage.Literals.OPAQUE_EXPRESSION__BODY, _Sequence_String);
		protected final @NonNull Property pr_OpaqueExpression_language = createProperty(PivotPackage.Literals.OPAQUE_EXPRESSION__LANGUAGE, _OrderedSet_String);
		protected final @NonNull Property pr_OpaqueExpression_message = createProperty(PivotPackage.Literals.OPAQUE_EXPRESSION__MESSAGE, _Sequence_String);
		protected final @NonNull Property pr_Operation_CallOperationAction = createProperty("CallOperationAction", _Set_CallOperationAction);
		protected final @NonNull Property pr_Operation_MessageType = createProperty("MessageType", _Set_MessageType);
		protected final @NonNull Property pr_Operation_Operation = createProperty("Operation", _Set_Operation);
		protected final @NonNull Property pr_Operation_OperationCallExp = createProperty("OperationCallExp", _Set_OperationCallExp);
		protected final @NonNull Property pr_Operation_bodyExpression = createProperty(PivotPackage.Literals.OPERATION__BODY_EXPRESSION, _OpaqueExpression);
		protected final @NonNull Property pr_Operation_class = createProperty(PivotPackage.Literals.OPERATION__CLASS, _Class);
		protected final @NonNull Property pr_Operation_isInvalidating = createProperty(PivotPackage.Literals.OPERATION__IS_INVALIDATING, _Boolean);
		protected final @NonNull Property pr_Operation_isValidating = createProperty(PivotPackage.Literals.OPERATION__IS_VALIDATING, _Boolean);
		protected final @NonNull Property pr_Operation_ownedParameter = createProperty(PivotPackage.Literals.OPERATION__OWNED_PARAMETER, _OrderedSet_Parameter);
		protected final @NonNull Property pr_Operation_owningType = createProperty(PivotPackage.Literals.OPERATION__OWNING_TYPE, _Type);
		protected final @NonNull Property pr_Operation_postcondition = createProperty(PivotPackage.Literals.OPERATION__POSTCONDITION, _Set_Constraint);
		protected final @NonNull Property pr_Operation_precedence = createProperty(PivotPackage.Literals.OPERATION__PRECEDENCE, _Precedence);
		protected final @NonNull Property pr_Operation_precondition = createProperty(PivotPackage.Literals.OPERATION__PRECONDITION, _Set_Constraint);
		protected final @NonNull Property pr_Operation_raisedException = createProperty(PivotPackage.Literals.OPERATION__RAISED_EXCEPTION, _Set_Type);
		protected final @NonNull Property pr_Operation_redefinedOperation = createProperty(PivotPackage.Literals.OPERATION__REDEFINED_OPERATION, _Set_Operation);
		protected final @NonNull Property pr_OperationCallExp_argument = createProperty(PivotPackage.Literals.OPERATION_CALL_EXP__ARGUMENT, _OrderedSet_OCLExpression);
		protected final @NonNull Property pr_OperationCallExp_referredOperation = createProperty(PivotPackage.Literals.OPERATION_CALL_EXP__REFERRED_OPERATION, _Operation);
		protected final @NonNull Property pr_Package_Package = createProperty("Package", _Set_Package);
		protected final @NonNull Property pr_Package_Root = createProperty("Root", _Root);
		protected final @NonNull Property pr_Package_importedPackage = createProperty(PivotPackage.Literals.PACKAGE__IMPORTED_PACKAGE, _Set_Package);
		protected final @NonNull Property pr_Package_nestedPackage = createProperty(PivotPackage.Literals.PACKAGE__NESTED_PACKAGE, _Set_Package);
		protected final @NonNull Property pr_Package_nestingPackage = createProperty(PivotPackage.Literals.PACKAGE__NESTING_PACKAGE, _Package);
		protected final @NonNull Property pr_Package_nsPrefix = createProperty(PivotPackage.Literals.PACKAGE__NS_PREFIX, _String);
		protected final @NonNull Property pr_Package_nsURI = createProperty(PivotPackage.Literals.PACKAGE__NS_URI, _String);
		protected final @NonNull Property pr_Package_ownedType = createProperty(PivotPackage.Literals.PACKAGE__OWNED_TYPE, _Set_Type);
		protected final @NonNull Property pr_Parameter_Variable = createProperty("Variable", _Set_Variable);
		protected final @NonNull Property pr_Parameter_operation = createProperty(PivotPackage.Literals.PARAMETER__OPERATION, _Operation);
		protected final @NonNull Property pr_ParameterableElement_owningTemplateParameter = createProperty(PivotPackage.Literals.PARAMETERABLE_ELEMENT__OWNING_TEMPLATE_PARAMETER, _TemplateParameter);
		protected final @NonNull Property pr_ParameterableElement_templateParameter = createProperty(PivotPackage.Literals.PARAMETERABLE_ELEMENT__TEMPLATE_PARAMETER, _TemplateParameter);
		protected final @NonNull Property pr_Precedence_Library = createProperty("Library", _Library);
		protected final @NonNull Property pr_Precedence_Operation = createProperty("Operation", _Set_Operation);
		protected final @NonNull Property pr_Precedence_associativity = createProperty(PivotPackage.Literals.PRECEDENCE__ASSOCIATIVITY, _AssociativityKind);
		protected final @NonNull Property pr_Precedence_order = createProperty(PivotPackage.Literals.PRECEDENCE__ORDER, _Integer);
		protected final @NonNull Property pr_Property_ConstructorPart = createProperty("ConstructorPart", _Set_ConstructorPart);
		protected final @NonNull Property pr_Property_DynamicProperty = createProperty("DynamicProperty", _Set_DynamicProperty);
		protected final @NonNull Property pr_Property_NavigationCallExp = createProperty("NavigationCallExp", _Set_NavigationCallExp);
		protected final @NonNull Property pr_Property_PropertyCallExp = createProperty("PropertyCallExp", _Set_PropertyCallExp);
		protected final @NonNull Property pr_Property_association = createProperty(PivotPackage.Literals.PROPERTY__ASSOCIATION, _AssociationClass);
		protected final @NonNull Property pr_Property_class = createProperty(PivotPackage.Literals.PROPERTY__CLASS, _Class);
		protected final @NonNull Property pr_Property_default = createProperty(PivotPackage.Literals.PROPERTY__DEFAULT, _String);
		protected final @NonNull Property pr_Property_defaultExpression = createProperty(PivotPackage.Literals.PROPERTY__DEFAULT_EXPRESSION, _OpaqueExpression);
		protected final @NonNull Property pr_Property_implicit = createProperty(PivotPackage.Literals.PROPERTY__IMPLICIT, _Boolean);
		protected final @NonNull Property pr_Property_isComposite = createProperty(PivotPackage.Literals.PROPERTY__IS_COMPOSITE, _Boolean);
		protected final @NonNull Property pr_Property_isDerived = createProperty(PivotPackage.Literals.PROPERTY__IS_DERIVED, _Boolean);
		protected final @NonNull Property pr_Property_isID = createProperty(PivotPackage.Literals.PROPERTY__IS_ID, _Boolean);
		protected final @NonNull Property pr_Property_isReadOnly = createProperty(PivotPackage.Literals.PROPERTY__IS_READ_ONLY, _Boolean);
		protected final @NonNull Property pr_Property_isResolveProxies = createProperty(PivotPackage.Literals.PROPERTY__IS_RESOLVE_PROXIES, _Boolean);
		protected final @NonNull Property pr_Property_isTransient = createProperty(PivotPackage.Literals.PROPERTY__IS_TRANSIENT, _Boolean);
		protected final @NonNull Property pr_Property_isUnsettable = createProperty(PivotPackage.Literals.PROPERTY__IS_UNSETTABLE, _Boolean);
		protected final @NonNull Property pr_Property_isVolatile = createProperty(PivotPackage.Literals.PROPERTY__IS_VOLATILE, _Boolean);
		protected final @NonNull Property pr_Property_keys = createProperty(PivotPackage.Literals.PROPERTY__KEYS, _Set_Property);
		protected final @NonNull Property pr_Property_opposite = createProperty(PivotPackage.Literals.PROPERTY__OPPOSITE, _Property);
		protected final @NonNull Property pr_Property_owningType = createProperty(PivotPackage.Literals.PROPERTY__OWNING_TYPE, _Type);
		protected final @NonNull Property pr_Property_redefinedProperty = createProperty(PivotPackage.Literals.PROPERTY__REDEFINED_PROPERTY, _Set_Property);
		protected final @NonNull Property pr_Property_referredProperty = createProperty(PivotPackage.Literals.PROPERTY__REFERRED_PROPERTY, _Property);
		protected final @NonNull Property pr_Property_subsettedProperty = createProperty(PivotPackage.Literals.PROPERTY__SUBSETTED_PROPERTY, _Set_Property);
		protected final @NonNull Property pr_PropertyCallExp_referredProperty = createProperty(PivotPackage.Literals.PROPERTY_CALL_EXP__REFERRED_PROPERTY, _Property);
		protected final @NonNull Property pr_Pseudostate_State = createProperty("State", _State);
		protected final @NonNull Property pr_Pseudostate_StateMachine = createProperty("StateMachine", _StateMachine);
		protected final @NonNull Property pr_Pseudostate_kind = createProperty(PivotPackage.Literals.PSEUDOSTATE__KIND, _PseudostateKind);
		protected final @NonNull Property pr_Pseudostate_state = createProperty(PivotPackage.Literals.PSEUDOSTATE__STATE, _State);
		protected final @NonNull Property pr_Pseudostate_stateMachine = createProperty(PivotPackage.Literals.PSEUDOSTATE__STATE_MACHINE, _StateMachine);
		protected final @NonNull Property pr_RealLiteralExp_realSymbol = createProperty(PivotPackage.Literals.REAL_LITERAL_EXP__REAL_SYMBOL, _Real);
		protected final @NonNull Property pr_Region_Region = createProperty("Region", _Set_Region);
		protected final @NonNull Property pr_Region_State = createProperty("State", _State);
		protected final @NonNull Property pr_Region_StateMachine = createProperty("StateMachine", _StateMachine);
		protected final @NonNull Property pr_Region_extendedRegion = createProperty(PivotPackage.Literals.REGION__EXTENDED_REGION, _Region);
		protected final @NonNull Property pr_Region_state = createProperty(PivotPackage.Literals.REGION__STATE, _State);
		protected final @NonNull Property pr_Region_stateMachine = createProperty(PivotPackage.Literals.REGION__STATE_MACHINE, _StateMachine);
		protected final @NonNull Property pr_Region_subvertex = createProperty(PivotPackage.Literals.REGION__SUBVERTEX, _Set_Vertex);
		protected final @NonNull Property pr_Region_transition = createProperty(PivotPackage.Literals.REGION__TRANSITION, _Set_Transition);
		protected final @NonNull Property pr_Root_externalURI = createProperty(PivotPackage.Literals.ROOT__EXTERNAL_URI, _String);
		protected final @NonNull Property pr_Root_imports = createProperty(PivotPackage.Literals.ROOT__IMPORTS, _OrderedSet_Import);
		protected final @NonNull Property pr_Root_nestedPackage = createProperty(PivotPackage.Literals.ROOT__NESTED_PACKAGE, _Set_Package);
		protected final @NonNull Property pr_SendSignalAction_MessageExp = createProperty("MessageExp", _MessageExp);
		protected final @NonNull Property pr_SendSignalAction_signal = createProperty(PivotPackage.Literals.SEND_SIGNAL_ACTION__SIGNAL, _Signal);
		protected final @NonNull Property pr_Signal_MessageType = createProperty("MessageType", _Set_MessageType);
		protected final @NonNull Property pr_Signal_SendSignalAction = createProperty("SendSignalAction", _Set_SendSignalAction);
		protected final @NonNull Property pr_State_ConnectionPointReference = createProperty("ConnectionPointReference", _Set_ConnectionPointReference);
		protected final @NonNull Property pr_State_Pseudostate = createProperty("Pseudostate", _Set_Pseudostate);
		protected final @NonNull Property pr_State_Region = createProperty("Region", _Set_Region);
		protected final @NonNull Property pr_State_State = createProperty("State", _Set_State);
		protected final @NonNull Property pr_State_StateExp = createProperty("StateExp", _Set_StateExp);
		protected final @NonNull Property pr_State_connection = createProperty(PivotPackage.Literals.STATE__CONNECTION, _Set_ConnectionPointReference);
		protected final @NonNull Property pr_State_connectionPoint = createProperty(PivotPackage.Literals.STATE__CONNECTION_POINT, _Set_Pseudostate);
		protected final @NonNull Property pr_State_deferrableTrigger = createProperty(PivotPackage.Literals.STATE__DEFERRABLE_TRIGGER, _Set_Trigger);
		protected final @NonNull Property pr_State_doActivity = createProperty(PivotPackage.Literals.STATE__DO_ACTIVITY, _Behavior);
		protected final @NonNull Property pr_State_entry = createProperty(PivotPackage.Literals.STATE__ENTRY, _Behavior);
		protected final @NonNull Property pr_State_exit = createProperty(PivotPackage.Literals.STATE__EXIT, _Behavior);
		protected final @NonNull Property pr_State_isComposite = createProperty(PivotPackage.Literals.STATE__IS_COMPOSITE, _Boolean);
		protected final @NonNull Property pr_State_isOrthogonal = createProperty(PivotPackage.Literals.STATE__IS_ORTHOGONAL, _Boolean);
		protected final @NonNull Property pr_State_isSimple = createProperty(PivotPackage.Literals.STATE__IS_SIMPLE, _Boolean);
		protected final @NonNull Property pr_State_isSubmachineState = createProperty(PivotPackage.Literals.STATE__IS_SUBMACHINE_STATE, _Boolean);
		protected final @NonNull Property pr_State_redefinedState = createProperty(PivotPackage.Literals.STATE__REDEFINED_STATE, _State);
		protected final @NonNull Property pr_State_region = createProperty(PivotPackage.Literals.STATE__REGION, _Set_Region);
		protected final @NonNull Property pr_State_stateInvariant = createProperty(PivotPackage.Literals.STATE__STATE_INVARIANT, _Constraint);
		protected final @NonNull Property pr_State_submachine = createProperty(PivotPackage.Literals.STATE__SUBMACHINE, _StateMachine);
		protected final @NonNull Property pr_StateExp_referredState = createProperty(PivotPackage.Literals.STATE_EXP__REFERRED_STATE, _State);
		protected final @NonNull Property pr_StateMachine_Pseudostate = createProperty("Pseudostate", _Set_Pseudostate);
		protected final @NonNull Property pr_StateMachine_Region = createProperty("Region", _Set_Region);
		protected final @NonNull Property pr_StateMachine_StateMachine = createProperty("StateMachine", _Set_StateMachine);
		protected final @NonNull Property pr_StateMachine_connectionPoint = createProperty(PivotPackage.Literals.STATE_MACHINE__CONNECTION_POINT, _Set_Pseudostate);
		protected final @NonNull Property pr_StateMachine_extendedStateMachine = createProperty(PivotPackage.Literals.STATE_MACHINE__EXTENDED_STATE_MACHINE, _Set_StateMachine);
		protected final @NonNull Property pr_StateMachine_region = createProperty(PivotPackage.Literals.STATE_MACHINE__REGION, _Set_Region_1);
		protected final @NonNull Property pr_StateMachine_submachineState = createProperty(PivotPackage.Literals.STATE_MACHINE__SUBMACHINE_STATE, _Set_State);
		protected final @NonNull Property pr_StringLiteralExp_stringSymbol = createProperty(PivotPackage.Literals.STRING_LITERAL_EXP__STRING_SYMBOL, _String);
		protected final @NonNull Property pr_TemplateBinding_boundElement = createProperty(PivotPackage.Literals.TEMPLATE_BINDING__BOUND_ELEMENT, _TemplateableElement);
		protected final @NonNull Property pr_TemplateBinding_parameterSubstitution = createProperty(PivotPackage.Literals.TEMPLATE_BINDING__PARAMETER_SUBSTITUTION, _Set_TemplateParameterSubstitution);
		protected final @NonNull Property pr_TemplateBinding_signature = createProperty(PivotPackage.Literals.TEMPLATE_BINDING__SIGNATURE, _TemplateSignature);
		protected final @NonNull Property pr_TemplateParameter_TemplateParameterSubstitution = createProperty("TemplateParameterSubstitution", _Set_TemplateParameterSubstitution);
		protected final @NonNull Property pr_TemplateParameter_TemplateSignature = createProperty("TemplateSignature", _Set_TemplateSignature);
		protected final @NonNull Property pr_TemplateParameter_default = createProperty(PivotPackage.Literals.TEMPLATE_PARAMETER__DEFAULT, _ParameterableElement);
		protected final @NonNull Property pr_TemplateParameter_ownedDefault = createProperty(PivotPackage.Literals.TEMPLATE_PARAMETER__OWNED_DEFAULT, _ParameterableElement);
		protected final @NonNull Property pr_TemplateParameter_ownedParameteredElement = createProperty(PivotPackage.Literals.TEMPLATE_PARAMETER__OWNED_PARAMETERED_ELEMENT, _ParameterableElement);
		protected final @NonNull Property pr_TemplateParameter_parameteredElement = createProperty(PivotPackage.Literals.TEMPLATE_PARAMETER__PARAMETERED_ELEMENT, _ParameterableElement);
		protected final @NonNull Property pr_TemplateParameter_signature = createProperty(PivotPackage.Literals.TEMPLATE_PARAMETER__SIGNATURE, _TemplateSignature);
		protected final @NonNull Property pr_TemplateParameterSubstitution_actual = createProperty(PivotPackage.Literals.TEMPLATE_PARAMETER_SUBSTITUTION__ACTUAL, _ParameterableElement);
		protected final @NonNull Property pr_TemplateParameterSubstitution_formal = createProperty(PivotPackage.Literals.TEMPLATE_PARAMETER_SUBSTITUTION__FORMAL, _TemplateParameter);
		protected final @NonNull Property pr_TemplateParameterSubstitution_ownedActual = createProperty(PivotPackage.Literals.TEMPLATE_PARAMETER_SUBSTITUTION__OWNED_ACTUAL, _ParameterableElement);
		protected final @NonNull Property pr_TemplateParameterSubstitution_templateBinding = createProperty(PivotPackage.Literals.TEMPLATE_PARAMETER_SUBSTITUTION__TEMPLATE_BINDING, _TemplateBinding);
		protected final @NonNull Property pr_TemplateParameterType_specification = createProperty(PivotPackage.Literals.TEMPLATE_PARAMETER_TYPE__SPECIFICATION, _String);
		protected final @NonNull Property pr_TemplateSignature_TemplateBinding = createProperty("TemplateBinding", _Set_TemplateBinding);
		protected final @NonNull Property pr_TemplateSignature_ownedParameter = createProperty(PivotPackage.Literals.TEMPLATE_SIGNATURE__OWNED_PARAMETER, _OrderedSet_TemplateParameter);
		protected final @NonNull Property pr_TemplateSignature_parameter = createProperty(PivotPackage.Literals.TEMPLATE_SIGNATURE__PARAMETER, _OrderedSet_TemplateParameter_1);
		protected final @NonNull Property pr_TemplateSignature_template = createProperty(PivotPackage.Literals.TEMPLATE_SIGNATURE__TEMPLATE, _TemplateableElement);
		protected final @NonNull Property pr_TemplateableElement_ownedTemplateSignature = createProperty(PivotPackage.Literals.TEMPLATEABLE_ELEMENT__OWNED_TEMPLATE_SIGNATURE, _TemplateSignature);
		protected final @NonNull Property pr_TemplateableElement_templateBinding = createProperty(PivotPackage.Literals.TEMPLATEABLE_ELEMENT__TEMPLATE_BINDING, _Set_TemplateBinding);
		protected final @NonNull Property pr_TemplateableElement_unspecializedElement = createProperty(PivotPackage.Literals.TEMPLATEABLE_ELEMENT__UNSPECIALIZED_ELEMENT, _TemplateableElement);
		protected final @NonNull Property pr_Transition_container = createProperty(PivotPackage.Literals.TRANSITION__CONTAINER, _Region);
		protected final @NonNull Property pr_Transition_effect = createProperty(PivotPackage.Literals.TRANSITION__EFFECT, _Behavior);
		protected final @NonNull Property pr_Transition_guard = createProperty(PivotPackage.Literals.TRANSITION__GUARD, _Constraint);
		protected final @NonNull Property pr_Transition_kind = createProperty(PivotPackage.Literals.TRANSITION__KIND, _TransitionKind);
		protected final @NonNull Property pr_Transition_source = createProperty(PivotPackage.Literals.TRANSITION__SOURCE, _Vertex);
		protected final @NonNull Property pr_Transition_target = createProperty(PivotPackage.Literals.TRANSITION__TARGET, _Vertex);
		protected final @NonNull Property pr_Transition_trigger = createProperty(PivotPackage.Literals.TRANSITION__TRIGGER, _Set_Trigger);
		protected final @NonNull Property pr_Trigger_State = createProperty("State", _State);
		protected final @NonNull Property pr_Trigger_Transition = createProperty("Transition", _Transition);
		protected final @NonNull Property pr_TupleLiteralExp_part = createProperty(PivotPackage.Literals.TUPLE_LITERAL_EXP__PART, _OrderedSet_TupleLiteralPart);
		protected final @NonNull Property pr_TupleLiteralPart_TupleLiteralExp = createProperty("TupleLiteralExp", _TupleLiteralExp);
		protected final @NonNull Property pr_TupleLiteralPart_initExpression = createProperty(PivotPackage.Literals.TUPLE_LITERAL_PART__INIT_EXPRESSION, _OCLExpression);
		protected final @NonNull Property pr_Type_CollectionType = createProperty("CollectionType", _Set_CollectionType);
		protected final @NonNull Property pr_Type_DataType = createProperty("DataType", _Set_DataType);
		protected final @NonNull Property pr_Type_DynamicElement = createProperty("DynamicElement", _Set_DynamicElement);
		protected final @NonNull Property pr_Type_ElementExtension = createProperty("ElementExtension", _Set_ElementExtension);
		protected final @NonNull Property pr_Type_Metaclass = createProperty("Metaclass", _Set_Metaclass);
		protected final @NonNull Property pr_Type_Operation = createProperty("Operation", _Set_Operation);
		protected final @NonNull Property pr_Type_Type = createProperty("Type", _Set_Type);
		protected final @NonNull Property pr_Type_TypeExp = createProperty("TypeExp", _Set_TypeExp);
		protected final @NonNull Property pr_Type_TypeTemplateParameter = createProperty("TypeTemplateParameter", _Set_TypeTemplateParameter);
		protected final @NonNull Property pr_Type_TypedElement = createProperty("TypedElement", _Set_TypedElement);
		protected final @NonNull Property pr_Type_instanceClassName = createProperty(PivotPackage.Literals.TYPE__INSTANCE_CLASS_NAME, _String);
		protected final @NonNull Property pr_Type_ownedAttribute = createProperty(PivotPackage.Literals.TYPE__OWNED_ATTRIBUTE, _OrderedSet_Property);
		protected final @NonNull Property pr_Type_ownedInvariant = createProperty(PivotPackage.Literals.TYPE__OWNED_INVARIANT, _Set_Constraint);
		protected final @NonNull Property pr_Type_ownedOperation = createProperty(PivotPackage.Literals.TYPE__OWNED_OPERATION, _OrderedSet_Operation);
		protected final @NonNull Property pr_Type_package = createProperty(PivotPackage.Literals.TYPE__PACKAGE, _Package);
		protected final @NonNull Property pr_Type_superClass = createProperty(PivotPackage.Literals.TYPE__SUPER_CLASS, _OrderedSet_Type);
		protected final @NonNull Property pr_TypeExp_referredType = createProperty(PivotPackage.Literals.TYPE_EXP__REFERRED_TYPE, _Type);
		protected final @NonNull Property pr_TypeTemplateParameter_allowSubstitutable = createProperty(PivotPackage.Literals.TYPE_TEMPLATE_PARAMETER__ALLOW_SUBSTITUTABLE, _Boolean);
		protected final @NonNull Property pr_TypeTemplateParameter_constrainingType = createProperty(PivotPackage.Literals.TYPE_TEMPLATE_PARAMETER__CONSTRAINING_TYPE, _Set_Type);
		protected final @NonNull Property pr_TypedElement_isRequired = createProperty(PivotPackage.Literals.TYPED_ELEMENT__IS_REQUIRED, _Boolean);
		protected final @NonNull Property pr_TypedElement_type = createProperty(PivotPackage.Literals.TYPED_ELEMENT__TYPE, _Type);
		protected final @NonNull Property pr_UnlimitedNaturalLiteralExp_unlimitedNaturalSymbol = createProperty(PivotPackage.Literals.UNLIMITED_NATURAL_LITERAL_EXP__UNLIMITED_NATURAL_SYMBOL, _UnlimitedNatural);
		protected final @NonNull Property pr_UnspecifiedType_lowerBound = createProperty(PivotPackage.Literals.UNSPECIFIED_TYPE__LOWER_BOUND, _Type);
		protected final @NonNull Property pr_UnspecifiedType_upperBound = createProperty(PivotPackage.Literals.UNSPECIFIED_TYPE__UPPER_BOUND, _Type);
		protected final @NonNull Property pr_Variable_IterateExp = createProperty("IterateExp", _IterateExp);
		protected final @NonNull Property pr_Variable_LetExp = createProperty("LetExp", _LetExp);
		protected final @NonNull Property pr_Variable_LoopExp = createProperty("LoopExp", _LoopExp);
		protected final @NonNull Property pr_Variable_implicit = createProperty(PivotPackage.Literals.VARIABLE__IMPLICIT, _Boolean);
		protected final @NonNull Property pr_Variable_initExpression = createProperty(PivotPackage.Literals.VARIABLE__INIT_EXPRESSION, _OCLExpression);
		protected final @NonNull Property pr_Variable_representedParameter = createProperty(PivotPackage.Literals.VARIABLE__REPRESENTED_PARAMETER, _Parameter);
		protected final @NonNull Property pr_VariableDeclaration_VariableExp = createProperty("VariableExp", _Set_VariableExp);
		protected final @NonNull Property pr_VariableExp_implicit = createProperty(PivotPackage.Literals.VARIABLE_EXP__IMPLICIT, _Boolean);
		protected final @NonNull Property pr_VariableExp_referredVariable = createProperty(PivotPackage.Literals.VARIABLE_EXP__REFERRED_VARIABLE, _VariableDeclaration);
		protected final @NonNull Property pr_Vertex_container = createProperty(PivotPackage.Literals.VERTEX__CONTAINER, _Region);
		protected final @NonNull Property pr_Vertex_incoming = createProperty(PivotPackage.Literals.VERTEX__INCOMING, _Set_Transition);
		protected final @NonNull Property pr_Vertex_outgoing = createProperty(PivotPackage.Literals.VERTEX__OUTGOING, _Set_Transition);

		protected void installProperties() {
			List<Property> ownedProperties;
			Property property;
			ownedProperties = _Annotation.getOwnedAttribute();
			ownedProperties.add(property = pr_Annotation_NamedElement);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_NamedElement_ownedAnnotation);
			ownedProperties.add(property = pr_Annotation_ownedContent);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Annotation_ownedDetail);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Detail_Annotation);
			ownedProperties.add(property = pr_Annotation_reference);
			property.setIsResolveProxies(true);
			ownedProperties = _AssociationClass.getOwnedAttribute();
			ownedProperties.add(property = pr_AssociationClass_AssociationClassCallExp);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_AssociationClassCallExp_referredAssociationClass);
			ownedProperties.add(property = pr_AssociationClass_unownedAttribute);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Property_association);
			ownedProperties = _AssociationClassCallExp.getOwnedAttribute();
			ownedProperties.add(property = pr_AssociationClassCallExp_referredAssociationClass);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_AssociationClass_AssociationClassCallExp);
			ownedProperties = _Behavior.getOwnedAttribute();
			ownedProperties.add(property = pr_Behavior_Class);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Class_ownedBehavior);
			ownedProperties.add(property = pr_Behavior_Transition);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Transition_effect);
			ownedProperties = _BooleanLiteralExp.getOwnedAttribute();
			ownedProperties.add(property = pr_BooleanLiteralExp_booleanSymbol);
			property.setIsResolveProxies(true);
			property.setIsUnsettable(true);
			ownedProperties = _CallExp.getOwnedAttribute();
			ownedProperties.add(property = pr_CallExp_implicit);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_CallExp_source);
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_OCLExpression_CallExp);
			ownedProperties = _CallOperationAction.getOwnedAttribute();
			ownedProperties.add(property = pr_CallOperationAction_MessageExp);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_MessageExp_calledOperation);
			ownedProperties.add(property = pr_CallOperationAction_operation);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Operation_CallOperationAction);
			ownedProperties = _Class.getOwnedAttribute();
			ownedProperties.add(property = pr_Class_isAbstract);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Class_isInterface);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Class_ownedBehavior);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Behavior_Class);
			ownedProperties = _CollectionItem.getOwnedAttribute();
			ownedProperties.add(property = pr_CollectionItem_item);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_OCLExpression_CollectionItem);
			ownedProperties = _CollectionLiteralExp.getOwnedAttribute();
			ownedProperties.add(property = pr_CollectionLiteralExp_kind);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_CollectionLiteralExp_part);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_CollectionLiteralPart_CollectionLiteralExp);
			ownedProperties = _CollectionLiteralPart.getOwnedAttribute();
			ownedProperties.add(property = pr_CollectionLiteralPart_CollectionLiteralExp);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_CollectionLiteralExp_part);
			ownedProperties = _CollectionRange.getOwnedAttribute();
			ownedProperties.add(property = pr_CollectionRange_first);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_CollectionRange_last);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties = _CollectionType.getOwnedAttribute();
			ownedProperties.add(property = pr_CollectionType_elementType);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_CollectionType);
			ownedProperties.add(property = pr_CollectionType_lower);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_CollectionType_upper);
			property.setIsResolveProxies(true);
			ownedProperties = _Comment.getOwnedAttribute();
			ownedProperties.add(property = pr_Comment_Element);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Element_ownedComment);
			ownedProperties.add(property = pr_Comment_annotatedElement);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Element_Comment);
			ownedProperties.add(property = pr_Comment_body);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties = _ConnectionPointReference.getOwnedAttribute();
			ownedProperties.add(property = pr_ConnectionPointReference_State);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_State_connection);
			ownedProperties.add(property = pr_ConnectionPointReference_entry);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_ConnectionPointReference_exit);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_ConnectionPointReference_state);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_State_ConnectionPointReference);
			ownedProperties = _Constraint.getOwnedAttribute();
			ownedProperties.add(property = pr_Constraint_Namespace);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Namespace_ownedRule);
			ownedProperties.add(property = pr_Constraint_State);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_State_stateInvariant);
			ownedProperties.add(property = pr_Constraint_Transition);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Transition_guard);
			ownedProperties.add(property = pr_Constraint_Type);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_ownedInvariant);
			ownedProperties.add(property = pr_Constraint_constrainedElement);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Element_Constraint);
			ownedProperties.add(property = pr_Constraint_context);
			property.setIsDerived(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setIsTransient(true);
			property.setIsVolatile(true);
			property.setOpposite(pr_Namespace_Constraint);
			ownedProperties.add(property = pr_Constraint_isCallable);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Constraint_specification);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_OpaqueExpression_Constraint);
			ownedProperties = _ConstructorExp.getOwnedAttribute();
			ownedProperties.add(property = pr_ConstructorExp_part);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_ConstructorPart_ConstructorExp);
			ownedProperties.add(property = pr_ConstructorExp_value);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties = _ConstructorPart.getOwnedAttribute();
			ownedProperties.add(property = pr_ConstructorPart_ConstructorExp);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_ConstructorExp_part);
			ownedProperties.add(property = pr_ConstructorPart_initExpression);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_OCLExpression_ConstructorPart);
			ownedProperties.add(property = pr_ConstructorPart_referredProperty);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Property_ConstructorPart);
			ownedProperties = _DataType.getOwnedAttribute();
			ownedProperties.add(property = pr_DataType_behavioralType);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_DataType);
			ownedProperties.add(property = pr_DataType_isSerializable);
			property.setIsResolveProxies(true);
			ownedProperties = _Detail.getOwnedAttribute();
			ownedProperties.add(property = pr_Detail_Annotation);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Annotation_ownedDetail);
			ownedProperties.add(property = pr_Detail_value);
			property.setIsResolveProxies(true);
			ownedProperties = _DynamicElement.getOwnedAttribute();
			ownedProperties.add(property = pr_DynamicElement_metaType);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_DynamicElement);
			ownedProperties = _DynamicProperty.getOwnedAttribute();
			ownedProperties.add(property = pr_DynamicProperty_DynamicType);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_DynamicType_ownedProperty);
			ownedProperties.add(property = pr_DynamicProperty_default);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_DynamicProperty_referredProperty);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Property_DynamicProperty);
			ownedProperties = _DynamicType.getOwnedAttribute();
			ownedProperties.add(property = pr_DynamicType_ownedProperty);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_DynamicProperty_DynamicType);
			ownedProperties = _Element.getOwnedAttribute();
			ownedProperties.add(property = pr_Element_Comment);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Comment_annotatedElement);
			ownedProperties.add(property = pr_Element_Constraint);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Constraint_constrainedElement);
			ownedProperties.add(property = pr_Element_extension);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_ElementExtension_base);
			ownedProperties.add(property = pr_Element_ownedComment);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Comment_Element);
			ownedProperties = _ElementExtension.getOwnedAttribute();
			ownedProperties.add(property = pr_ElementExtension_base);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Element_extension);
			ownedProperties.add(property = pr_ElementExtension_stereotype);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_ElementExtension);
			ownedProperties = _EnumLiteralExp.getOwnedAttribute();
			ownedProperties.add(property = pr_EnumLiteralExp_referredEnumLiteral);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_EnumerationLiteral_EnumLiteralExp);
			ownedProperties = _Enumeration.getOwnedAttribute();
			ownedProperties.add(property = pr_Enumeration_ownedLiteral);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_EnumerationLiteral_enumeration);
			ownedProperties = _EnumerationLiteral.getOwnedAttribute();
			ownedProperties.add(property = pr_EnumerationLiteral_EnumLiteralExp);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_EnumLiteralExp_referredEnumLiteral);
			ownedProperties.add(property = pr_EnumerationLiteral_enumeration);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Enumeration_ownedLiteral);
			ownedProperties.add(property = pr_EnumerationLiteral_value);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties = _ExpressionInOCL.getOwnedAttribute();
			ownedProperties.add(property = pr_ExpressionInOCL_bodyExpression);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_ExpressionInOCL_contextVariable);
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_ExpressionInOCL_messageExpression);
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_ExpressionInOCL_parameterVariable);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_ExpressionInOCL_resultVariable);
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties = _Feature.getOwnedAttribute();
			ownedProperties.add(property = pr_Feature_implementation);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setIsTransient(true);
			ownedProperties.add(property = pr_Feature_implementationClass);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties = _FeatureCallExp.getOwnedAttribute();
			ownedProperties.add(property = pr_FeatureCallExp_isPre);
			property.setIsResolveProxies(true);
			ownedProperties = _IfExp.getOwnedAttribute();
			ownedProperties.add(property = pr_IfExp_condition);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_IfExp_elseExpression);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_IfExp_thenExpression);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties = _Import.getOwnedAttribute();
			ownedProperties.add(property = pr_Import_Root);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Root_imports);
			ownedProperties.add(property = pr_Import_importedNamespace);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Namespace_Import);
			ownedProperties = _IntegerLiteralExp.getOwnedAttribute();
			ownedProperties.add(property = pr_IntegerLiteralExp_integerSymbol);
			property.setIsResolveProxies(true);
			ownedProperties = _IterateExp.getOwnedAttribute();
			ownedProperties.add(property = pr_IterateExp_result);
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Variable_IterateExp);
			ownedProperties = _Iteration.getOwnedAttribute();
			ownedProperties.add(property = pr_Iteration_LoopExp);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_LoopExp_referredIteration);
			ownedProperties.add(property = pr_Iteration_ownedAccumulator);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Iteration_ownedIterator);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties = _LambdaType.getOwnedAttribute();
			ownedProperties.add(property = pr_LambdaType_contextType);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_LambdaType_parameterType);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_LambdaType_resultType);
			property.setIsResolveProxies(true);
			ownedProperties = _LetExp.getOwnedAttribute();
			ownedProperties.add(property = pr_LetExp_in);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_OCLExpression_LetExp);
			ownedProperties.add(property = pr_LetExp_variable);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Variable_LetExp);
			ownedProperties = _Library.getOwnedAttribute();
			ownedProperties.add(property = pr_Library_ownedPrecedence);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Precedence_Library);
			ownedProperties = _LoopExp.getOwnedAttribute();
			ownedProperties.add(property = pr_LoopExp_body);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_OCLExpression_LoopExp);
			ownedProperties.add(property = pr_LoopExp_iterator);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Variable_LoopExp);
			ownedProperties.add(property = pr_LoopExp_referredIteration);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Iteration_LoopExp);
			ownedProperties = _MessageExp.getOwnedAttribute();
			ownedProperties.add(property = pr_MessageExp_argument);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_MessageExp_calledOperation);
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_CallOperationAction_MessageExp);
			ownedProperties.add(property = pr_MessageExp_sentSignal);
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_SendSignalAction_MessageExp);
			ownedProperties.add(property = pr_MessageExp_target);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties = _MessageType.getOwnedAttribute();
			ownedProperties.add(property = pr_MessageType_referredOperation);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Operation_MessageType);
			ownedProperties.add(property = pr_MessageType_referredSignal);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Signal_MessageType);
			ownedProperties = _Metaclass.getOwnedAttribute();
			ownedProperties.add(property = pr_Metaclass_instanceType);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_Metaclass);
			ownedProperties = _NamedElement.getOwnedAttribute();
			ownedProperties.add(property = pr_NamedElement_isStatic);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_NamedElement_name);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_NamedElement_ownedAnnotation);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Annotation_NamedElement);
			ownedProperties = _Namespace.getOwnedAttribute();
			ownedProperties.add(property = pr_Namespace_Constraint);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Constraint_context);
			ownedProperties.add(property = pr_Namespace_Import);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Import_importedNamespace);
			ownedProperties.add(property = pr_Namespace_ownedRule);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Constraint_Namespace);
			ownedProperties = _NavigationCallExp.getOwnedAttribute();
			ownedProperties.add(property = pr_NavigationCallExp_navigationSource);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Property_NavigationCallExp);
			ownedProperties.add(property = pr_NavigationCallExp_qualifier);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_OCLExpression_NavigationCallExp);
			ownedProperties = _OCLExpression.getOwnedAttribute();
			ownedProperties.add(property = pr_OCLExpression_CallExp);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_CallExp_source);
			ownedProperties.add(property = pr_OCLExpression_CollectionItem);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_CollectionItem_item);
			ownedProperties.add(property = pr_OCLExpression_ConstructorPart);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_ConstructorPart_initExpression);
			ownedProperties.add(property = pr_OCLExpression_LetExp);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_LetExp_in);
			ownedProperties.add(property = pr_OCLExpression_LoopExp);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_LoopExp_body);
			ownedProperties.add(property = pr_OCLExpression_NavigationCallExp);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_NavigationCallExp_qualifier);
			ownedProperties.add(property = pr_OCLExpression_OperationCallExp);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_OperationCallExp_argument);
			ownedProperties.add(property = pr_OCLExpression_TupleLiteralPart);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TupleLiteralPart_initExpression);
			ownedProperties.add(property = pr_OCLExpression_Variable);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Variable_initExpression);
			ownedProperties = _OpaqueExpression.getOwnedAttribute();
			ownedProperties.add(property = pr_OpaqueExpression_Constraint);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Constraint_specification);
			ownedProperties.add(property = pr_OpaqueExpression_Operation);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Operation_bodyExpression);
			ownedProperties.add(property = pr_OpaqueExpression_Property);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Property_defaultExpression);
			ownedProperties.add(property = pr_OpaqueExpression_body);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_OpaqueExpression_language);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_OpaqueExpression_message);
			property.setIsResolveProxies(true);
			ownedProperties = _Operation.getOwnedAttribute();
			ownedProperties.add(property = pr_Operation_CallOperationAction);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_CallOperationAction_operation);
			ownedProperties.add(property = pr_Operation_MessageType);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_MessageType_referredOperation);
			ownedProperties.add(property = pr_Operation_Operation);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Operation_redefinedOperation);
			ownedProperties.add(property = pr_Operation_OperationCallExp);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_OperationCallExp_referredOperation);
			ownedProperties.add(property = pr_Operation_bodyExpression);
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_OpaqueExpression_Operation);
			ownedProperties.add(property = pr_Operation_class);
			property.setIsReadOnly(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setIsTransient(true);
			property.setIsVolatile(true);
			ownedProperties.add(property = pr_Operation_isInvalidating);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Operation_isValidating);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Operation_ownedParameter);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Parameter_operation);
			ownedProperties.add(property = pr_Operation_owningType);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_ownedOperation);
			ownedProperties.add(property = pr_Operation_postcondition);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Operation_precedence);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Precedence_Operation);
			ownedProperties.add(property = pr_Operation_precondition);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Operation_raisedException);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_Operation);
			ownedProperties.add(property = pr_Operation_redefinedOperation);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Operation_Operation);
			ownedProperties = _OperationCallExp.getOwnedAttribute();
			ownedProperties.add(property = pr_OperationCallExp_argument);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_OCLExpression_OperationCallExp);
			ownedProperties.add(property = pr_OperationCallExp_referredOperation);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Operation_OperationCallExp);
			ownedProperties = _Package.getOwnedAttribute();
			ownedProperties.add(property = pr_Package_Package);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Package_importedPackage);
			ownedProperties.add(property = pr_Package_Root);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Root_nestedPackage);
			ownedProperties.add(property = pr_Package_importedPackage);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Package_Package);
			ownedProperties.add(property = pr_Package_nestedPackage);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Package_nestingPackage);
			ownedProperties.add(property = pr_Package_nestingPackage);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Package_nestedPackage);
			ownedProperties.add(property = pr_Package_nsPrefix);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Package_nsURI);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Package_ownedType);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_package);
			ownedProperties = _Parameter.getOwnedAttribute();
			ownedProperties.add(property = pr_Parameter_Variable);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Variable_representedParameter);
			ownedProperties.add(property = pr_Parameter_operation);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Operation_ownedParameter);
			ownedProperties = _ParameterableElement.getOwnedAttribute();
			ownedProperties.add(property = pr_ParameterableElement_owningTemplateParameter);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateParameter_ownedParameteredElement);
			ownedProperties.add(property = pr_ParameterableElement_templateParameter);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateParameter_parameteredElement);
			ownedProperties = _Precedence.getOwnedAttribute();
			ownedProperties.add(property = pr_Precedence_Library);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Library_ownedPrecedence);
			ownedProperties.add(property = pr_Precedence_Operation);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Operation_precedence);
			ownedProperties.add(property = pr_Precedence_associativity);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Precedence_order);
			property.setIsResolveProxies(true);
			ownedProperties = _Property.getOwnedAttribute();
			ownedProperties.add(property = pr_Property_ConstructorPart);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_ConstructorPart_referredProperty);
			ownedProperties.add(property = pr_Property_DynamicProperty);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_DynamicProperty_referredProperty);
			ownedProperties.add(property = pr_Property_NavigationCallExp);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_NavigationCallExp_navigationSource);
			ownedProperties.add(property = pr_Property_PropertyCallExp);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_PropertyCallExp_referredProperty);
			ownedProperties.add(property = pr_Property_association);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_AssociationClass_unownedAttribute);
			ownedProperties.add(property = pr_Property_class);
			property.setIsReadOnly(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setIsTransient(true);
			property.setIsVolatile(true);
			ownedProperties.add(property = pr_Property_default);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_defaultExpression);
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_OpaqueExpression_Property);
			ownedProperties.add(property = pr_Property_implicit);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_isComposite);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_isDerived);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_isID);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_isReadOnly);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_isResolveProxies);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_isTransient);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_isUnsettable);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_isVolatile);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_keys);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_opposite);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_owningType);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_ownedAttribute);
			ownedProperties.add(property = pr_Property_redefinedProperty);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_referredProperty);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_subsettedProperty);
			property.setIsResolveProxies(true);
			ownedProperties = _PropertyCallExp.getOwnedAttribute();
			ownedProperties.add(property = pr_PropertyCallExp_referredProperty);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Property_PropertyCallExp);
			ownedProperties = _Pseudostate.getOwnedAttribute();
			ownedProperties.add(property = pr_Pseudostate_State);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_State_connectionPoint);
			ownedProperties.add(property = pr_Pseudostate_StateMachine);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_StateMachine_connectionPoint);
			ownedProperties.add(property = pr_Pseudostate_kind);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Pseudostate_state);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_State_Pseudostate);
			ownedProperties.add(property = pr_Pseudostate_stateMachine);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_StateMachine_Pseudostate);
			ownedProperties = _RealLiteralExp.getOwnedAttribute();
			ownedProperties.add(property = pr_RealLiteralExp_realSymbol);
			property.setIsResolveProxies(true);
			ownedProperties = _Region.getOwnedAttribute();
			ownedProperties.add(property = pr_Region_Region);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Region_extendedRegion);
			ownedProperties.add(property = pr_Region_State);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_State_region);
			ownedProperties.add(property = pr_Region_StateMachine);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_StateMachine_region);
			ownedProperties.add(property = pr_Region_extendedRegion);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Region_Region);
			ownedProperties.add(property = pr_Region_state);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_State_Region);
			ownedProperties.add(property = pr_Region_stateMachine);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_StateMachine_Region);
			ownedProperties.add(property = pr_Region_subvertex);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Vertex_container);
			ownedProperties.add(property = pr_Region_transition);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Transition_container);
			ownedProperties = _Root.getOwnedAttribute();
			ownedProperties.add(property = pr_Root_externalURI);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Root_imports);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Import_Root);
			ownedProperties.add(property = pr_Root_nestedPackage);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Package_Root);
			ownedProperties = _SendSignalAction.getOwnedAttribute();
			ownedProperties.add(property = pr_SendSignalAction_MessageExp);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_MessageExp_sentSignal);
			ownedProperties.add(property = pr_SendSignalAction_signal);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Signal_SendSignalAction);
			ownedProperties = _Signal.getOwnedAttribute();
			ownedProperties.add(property = pr_Signal_MessageType);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_MessageType_referredSignal);
			ownedProperties.add(property = pr_Signal_SendSignalAction);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_SendSignalAction_signal);
			ownedProperties = _State.getOwnedAttribute();
			ownedProperties.add(property = pr_State_ConnectionPointReference);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_ConnectionPointReference_state);
			ownedProperties.add(property = pr_State_Pseudostate);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Pseudostate_state);
			ownedProperties.add(property = pr_State_Region);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Region_state);
			ownedProperties.add(property = pr_State_State);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_State_redefinedState);
			ownedProperties.add(property = pr_State_StateExp);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_StateExp_referredState);
			ownedProperties.add(property = pr_State_connection);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_ConnectionPointReference_State);
			ownedProperties.add(property = pr_State_connectionPoint);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Pseudostate_State);
			ownedProperties.add(property = pr_State_deferrableTrigger);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Trigger_State);
			ownedProperties.add(property = pr_State_doActivity);
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_State_entry);
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_State_exit);
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_State_isComposite);
			property.setIsDerived(true);
			property.setIsResolveProxies(true);
			property.setIsTransient(true);
			property.setIsVolatile(true);
			ownedProperties.add(property = pr_State_isOrthogonal);
			property.setIsDerived(true);
			property.setIsResolveProxies(true);
			property.setIsTransient(true);
			property.setIsVolatile(true);
			ownedProperties.add(property = pr_State_isSimple);
			property.setIsDerived(true);
			property.setIsResolveProxies(true);
			property.setIsTransient(true);
			property.setIsVolatile(true);
			ownedProperties.add(property = pr_State_isSubmachineState);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_State_redefinedState);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_State_State);
			ownedProperties.add(property = pr_State_region);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Region_State);
			ownedProperties.add(property = pr_State_stateInvariant);
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Constraint_State);
			ownedProperties.add(property = pr_State_submachine);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_StateMachine_submachineState);
			ownedProperties = _StateExp.getOwnedAttribute();
			ownedProperties.add(property = pr_StateExp_referredState);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_State_StateExp);
			ownedProperties = _StateMachine.getOwnedAttribute();
			ownedProperties.add(property = pr_StateMachine_Pseudostate);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Pseudostate_stateMachine);
			ownedProperties.add(property = pr_StateMachine_Region);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Region_stateMachine);
			ownedProperties.add(property = pr_StateMachine_StateMachine);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_StateMachine_extendedStateMachine);
			ownedProperties.add(property = pr_StateMachine_connectionPoint);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Pseudostate_StateMachine);
			ownedProperties.add(property = pr_StateMachine_extendedStateMachine);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_StateMachine_StateMachine);
			ownedProperties.add(property = pr_StateMachine_region);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Region_StateMachine);
			ownedProperties.add(property = pr_StateMachine_submachineState);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_State_submachine);
			ownedProperties = _StringLiteralExp.getOwnedAttribute();
			ownedProperties.add(property = pr_StringLiteralExp_stringSymbol);
			property.setIsResolveProxies(true);
			ownedProperties = _TemplateBinding.getOwnedAttribute();
			ownedProperties.add(property = pr_TemplateBinding_boundElement);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateableElement_templateBinding);
			ownedProperties.add(property = pr_TemplateBinding_parameterSubstitution);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateParameterSubstitution_templateBinding);
			ownedProperties.add(property = pr_TemplateBinding_signature);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateSignature_TemplateBinding);
			ownedProperties = _TemplateParameter.getOwnedAttribute();
			ownedProperties.add(property = pr_TemplateParameter_TemplateParameterSubstitution);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateParameterSubstitution_formal);
			ownedProperties.add(property = pr_TemplateParameter_TemplateSignature);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateSignature_parameter);
			ownedProperties.add(property = pr_TemplateParameter_default);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_TemplateParameter_ownedDefault);
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_TemplateParameter_ownedParameteredElement);
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_ParameterableElement_owningTemplateParameter);
			ownedProperties.add(property = pr_TemplateParameter_parameteredElement);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_ParameterableElement_templateParameter);
			ownedProperties.add(property = pr_TemplateParameter_signature);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateSignature_ownedParameter);
			ownedProperties = _TemplateParameterSubstitution.getOwnedAttribute();
			ownedProperties.add(property = pr_TemplateParameterSubstitution_actual);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_TemplateParameterSubstitution_formal);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateParameter_TemplateParameterSubstitution);
			ownedProperties.add(property = pr_TemplateParameterSubstitution_ownedActual);
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_TemplateParameterSubstitution_templateBinding);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateBinding_parameterSubstitution);
			ownedProperties = _TemplateParameterType.getOwnedAttribute();
			ownedProperties.add(property = pr_TemplateParameterType_specification);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties = _TemplateSignature.getOwnedAttribute();
			ownedProperties.add(property = pr_TemplateSignature_TemplateBinding);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateBinding_signature);
			ownedProperties.add(property = pr_TemplateSignature_ownedParameter);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateParameter_signature);
			ownedProperties.add(property = pr_TemplateSignature_parameter);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateParameter_TemplateSignature);
			ownedProperties.add(property = pr_TemplateSignature_template);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateableElement_ownedTemplateSignature);
			ownedProperties = _TemplateableElement.getOwnedAttribute();
			ownedProperties.add(property = pr_TemplateableElement_ownedTemplateSignature);
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateSignature_template);
			ownedProperties.add(property = pr_TemplateableElement_templateBinding);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TemplateBinding_boundElement);
			ownedProperties.add(property = pr_TemplateableElement_unspecializedElement);
			property.setIsRequired(false);
			property.setIsTransient(true);
			ownedProperties = _Transition.getOwnedAttribute();
			ownedProperties.add(property = pr_Transition_container);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Region_transition);
			ownedProperties.add(property = pr_Transition_effect);
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Behavior_Transition);
			ownedProperties.add(property = pr_Transition_guard);
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Constraint_Transition);
			ownedProperties.add(property = pr_Transition_kind);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Transition_source);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Vertex_outgoing);
			ownedProperties.add(property = pr_Transition_target);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Vertex_incoming);
			ownedProperties.add(property = pr_Transition_trigger);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Trigger_Transition);
			ownedProperties = _Trigger.getOwnedAttribute();
			ownedProperties.add(property = pr_Trigger_State);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_State_deferrableTrigger);
			ownedProperties.add(property = pr_Trigger_Transition);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Transition_trigger);
			ownedProperties = _TupleLiteralExp.getOwnedAttribute();
			ownedProperties.add(property = pr_TupleLiteralExp_part);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TupleLiteralPart_TupleLiteralExp);
			ownedProperties = _TupleLiteralPart.getOwnedAttribute();
			ownedProperties.add(property = pr_TupleLiteralPart_TupleLiteralExp);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TupleLiteralExp_part);
			ownedProperties.add(property = pr_TupleLiteralPart_initExpression);
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_OCLExpression_TupleLiteralPart);
			ownedProperties = _Type.getOwnedAttribute();
			ownedProperties.add(property = pr_Type_CollectionType);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_CollectionType_elementType);
			ownedProperties.add(property = pr_Type_DataType);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_DataType_behavioralType);
			ownedProperties.add(property = pr_Type_DynamicElement);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_DynamicElement_metaType);
			ownedProperties.add(property = pr_Type_ElementExtension);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_ElementExtension_stereotype);
			ownedProperties.add(property = pr_Type_Metaclass);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Metaclass_instanceType);
			ownedProperties.add(property = pr_Type_Operation);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Operation_raisedException);
			ownedProperties.add(property = pr_Type_Type);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_superClass);
			ownedProperties.add(property = pr_Type_TypeExp);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TypeExp_referredType);
			ownedProperties.add(property = pr_Type_TypeTemplateParameter);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TypeTemplateParameter_constrainingType);
			ownedProperties.add(property = pr_Type_TypedElement);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_TypedElement_type);
			ownedProperties.add(property = pr_Type_instanceClassName);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Type_ownedAttribute);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Property_owningType);
			ownedProperties.add(property = pr_Type_ownedInvariant);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Constraint_Type);
			ownedProperties.add(property = pr_Type_ownedOperation);
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Operation_owningType);
			ownedProperties.add(property = pr_Type_package);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Package_ownedType);
			ownedProperties.add(property = pr_Type_superClass);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_Type);
			ownedProperties = _TypeExp.getOwnedAttribute();
			ownedProperties.add(property = pr_TypeExp_referredType);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_TypeExp);
			ownedProperties = _TypeTemplateParameter.getOwnedAttribute();
			ownedProperties.add(property = pr_TypeTemplateParameter_allowSubstitutable);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_TypeTemplateParameter_constrainingType);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_TypeTemplateParameter);
			ownedProperties = _TypedElement.getOwnedAttribute();
			ownedProperties.add(property = pr_TypedElement_isRequired);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_TypedElement_type);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Type_TypedElement);
			ownedProperties = _UnlimitedNaturalLiteralExp.getOwnedAttribute();
			ownedProperties.add(property = pr_UnlimitedNaturalLiteralExp_unlimitedNaturalSymbol);
			property.setIsResolveProxies(true);
			ownedProperties = _UnspecifiedType.getOwnedAttribute();
			ownedProperties.add(property = pr_UnspecifiedType_lowerBound);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_UnspecifiedType_upperBound);
			property.setIsResolveProxies(true);
			ownedProperties = _Variable.getOwnedAttribute();
			ownedProperties.add(property = pr_Variable_IterateExp);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_IterateExp_result);
			ownedProperties.add(property = pr_Variable_LetExp);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_LetExp_variable);
			ownedProperties.add(property = pr_Variable_LoopExp);
			property.setImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_LoopExp_iterator);
			ownedProperties.add(property = pr_Variable_implicit);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Variable_initExpression);
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_OCLExpression_Variable);
			ownedProperties.add(property = pr_Variable_representedParameter);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Parameter_Variable);
			ownedProperties = _VariableDeclaration.getOwnedAttribute();
			ownedProperties.add(property = pr_VariableDeclaration_VariableExp);
			property.setImplicit(true);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_VariableExp_referredVariable);
			ownedProperties = _VariableExp.getOwnedAttribute();
			ownedProperties.add(property = pr_VariableExp_implicit);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_VariableExp_referredVariable);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_VariableDeclaration_VariableExp);
			ownedProperties = _Vertex.getOwnedAttribute();
			ownedProperties.add(property = pr_Vertex_container);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Region_subvertex);
			ownedProperties.add(property = pr_Vertex_incoming);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Transition_target);
			ownedProperties.add(property = pr_Vertex_outgoing);
			property.setIsResolveProxies(true);
			property.setOpposite(pr_Transition_source);
		}

		protected final @NonNull TypeTemplateParameter tp_Visitor = createTypeTemplateParameter(_Visitor_R);
		
		protected final @NonNull TemplateSignature ts_Visitor = createTemplateSignature(_Visitor, tp_Visitor);
		
		protected void installTemplateSignatures() {
		}

		protected void installTemplateBindings() {
			_Bag_AssociationClassCallExp.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _AssociationClassCallExp)));
			_Bag_Behavior.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _Behavior)));
			_Bag_CallOperationAction.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _CallOperationAction)));
			_Bag_CollectionType.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _CollectionType)));
			_Bag_Comment.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _Comment)));
			_Bag_ConnectionPointReference.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _ConnectionPointReference)));
			_Bag_Constraint.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _Constraint)));
			_Bag_ConstructorPart.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _ConstructorPart)));
			_Bag_DataType.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _DataType)));
			_Bag_DynamicElement.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _DynamicElement)));
			_Bag_DynamicProperty.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _DynamicProperty)));
			_Bag_ElementExtension.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _ElementExtension)));
			_Bag_Element.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _Element)));
			_Bag_EnumLiteralExp.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _EnumLiteralExp)));
			_Bag_Import.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _Import)));
			_Bag_LoopExp.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _LoopExp)));
			_Bag_MessageType.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _MessageType)));
			_Bag_Metaclass.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _Metaclass)));
			_Bag_NavigationCallExp.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _NavigationCallExp)));
			_Bag_OperationCallExp.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _OperationCallExp)));
			_Bag_Operation.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _Operation)));
			_Bag_Package.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _Package)));
			_Bag_ParameterableElement.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _ParameterableElement)));
			_Bag_PropertyCallExp.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _PropertyCallExp)));
			_Bag_Property.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _Property)));
			_Bag_Pseudostate.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _Pseudostate)));
			_Bag_Region.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _Region)));
			_Bag_SendSignalAction.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _SendSignalAction)));
			_Bag_StateExp.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _StateExp)));
			_Bag_StateMachine.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _StateMachine)));
			_Bag_State.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _State)));
			_Bag_String.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _String)));
			_Bag_TemplateBinding.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _TemplateBinding)));
			_Bag_TemplateParameterSubstitution.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _TemplateParameterSubstitution)));
			_Bag_TemplateSignature.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _TemplateSignature)));
			_Bag_Transition.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _Transition)));
			_Bag_Trigger.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _Trigger)));
			_Bag_TypeExp.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _TypeExp)));
			_Bag_TypeTemplateParameter.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _TypeTemplateParameter)));
			_Bag_Type.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _Type)));
			_Bag_TypedElement.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _TypedElement)));
			_Bag_VariableExp.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _VariableExp)));
			_Bag_Variable.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _Variable)));
			_Bag_Vertex.getTemplateBinding().add(createTemplateBinding(_Bag_,
				createTemplateParameterSubstitution(_Bag_T, _Vertex)));
			_Collection_Annotation.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _Annotation)));
			_Collection_AssociationClassCallExp.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _AssociationClassCallExp)));
			_Collection_Behavior.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _Behavior)));
			_Collection_CallOperationAction.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _CallOperationAction)));
			_Collection_Class.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _Class)));
			_Collection_CollectionLiteralPart.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _CollectionLiteralPart)));
			_Collection_CollectionType.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _CollectionType)));
			_Collection_Comment.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _Comment)));
			_Collection_ConnectionPointReference.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _ConnectionPointReference)));
			_Collection_Constraint.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _Constraint)));
			_Collection_ConstructorPart.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _ConstructorPart)));
			_Collection_DataType.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _DataType)));
			_Collection_Detail.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _Detail)));
			_Collection_DynamicElement.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _DynamicElement)));
			_Collection_DynamicProperty.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _DynamicProperty)));
			_Collection_ElementExtension.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _ElementExtension)));
			_Collection_Element.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _Element)));
			_Collection_EnumLiteralExp.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _EnumLiteralExp)));
			_Collection_EnumerationLiteral.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _EnumerationLiteral)));
			_Collection_Import.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _Import)));
			_Collection_LoopExp.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _LoopExp)));
			_Collection_MessageType.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _MessageType)));
			_Collection_Metaclass.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _Metaclass)));
			_Collection_NavigationCallExp.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _NavigationCallExp)));
			_Collection_OCLExpression.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _OCLExpression)));
			_Collection_OperationCallExp.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _OperationCallExp)));
			_Collection_Operation.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _Operation)));
			_Collection_Package.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _Package)));
			_Collection_Parameter.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _Parameter)));
			_Collection_ParameterableElement.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _ParameterableElement)));
			_Collection_Precedence.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _Precedence)));
			_Collection_PropertyCallExp.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _PropertyCallExp)));
			_Collection_Property.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _Property)));
			_Collection_Pseudostate.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _Pseudostate)));
			_Collection_Region.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _Region)));
			_Collection_SendSignalAction.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _SendSignalAction)));
			_Collection_StateExp.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _StateExp)));
			_Collection_StateMachine.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _StateMachine)));
			_Collection_State.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _State)));
			_Collection_String.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _String)));
			_Collection_TemplateBinding.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _TemplateBinding)));
			_Collection_TemplateParameterSubstitution.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _TemplateParameterSubstitution)));
			_Collection_TemplateParameter.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _TemplateParameter)));
			_Collection_TemplateSignature.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _TemplateSignature)));
			_Collection_Transition.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _Transition)));
			_Collection_Trigger.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _Trigger)));
			_Collection_TupleLiteralPart.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _TupleLiteralPart)));
			_Collection_TypeExp.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _TypeExp)));
			_Collection_TypeTemplateParameter.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _TypeTemplateParameter)));
			_Collection_Type.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _Type)));
			_Collection_TypedElement.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _TypedElement)));
			_Collection_VariableExp.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _VariableExp)));
			_Collection_Variable.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _Variable)));
			_Collection_Vertex.getTemplateBinding().add(createTemplateBinding(_Collection_,
				createTemplateParameterSubstitution(_Collection_T, _Vertex)));
			_OrderedSet_Annotation.getTemplateBinding().add(createTemplateBinding(_OrderedSet_,
				createTemplateParameterSubstitution(_OrderedSet_T, _Annotation)));
			_OrderedSet_Class.getTemplateBinding().add(createTemplateBinding(_OrderedSet_,
				createTemplateParameterSubstitution(_OrderedSet_T, _Class)));
			_OrderedSet_CollectionLiteralPart.getTemplateBinding().add(createTemplateBinding(_OrderedSet_,
				createTemplateParameterSubstitution(_OrderedSet_T, _CollectionLiteralPart)));
			_OrderedSet_Constraint.getTemplateBinding().add(createTemplateBinding(_OrderedSet_,
				createTemplateParameterSubstitution(_OrderedSet_T, _Constraint)));
			_OrderedSet_ConstructorPart.getTemplateBinding().add(createTemplateBinding(_OrderedSet_,
				createTemplateParameterSubstitution(_OrderedSet_T, _ConstructorPart)));
			_OrderedSet_Detail.getTemplateBinding().add(createTemplateBinding(_OrderedSet_,
				createTemplateParameterSubstitution(_OrderedSet_T, _Detail)));
			_OrderedSet_Element.getTemplateBinding().add(createTemplateBinding(_OrderedSet_,
				createTemplateParameterSubstitution(_OrderedSet_T, _Element)));
			_OrderedSet_EnumerationLiteral.getTemplateBinding().add(createTemplateBinding(_OrderedSet_,
				createTemplateParameterSubstitution(_OrderedSet_T, _EnumerationLiteral)));
			_OrderedSet_Import.getTemplateBinding().add(createTemplateBinding(_OrderedSet_,
				createTemplateParameterSubstitution(_OrderedSet_T, _Import)));
			_OrderedSet_OCLExpression.getTemplateBinding().add(createTemplateBinding(_OrderedSet_,
				createTemplateParameterSubstitution(_OrderedSet_T, _OCLExpression)));
			_OrderedSet_Operation.getTemplateBinding().add(createTemplateBinding(_OrderedSet_,
				createTemplateParameterSubstitution(_OrderedSet_T, _Operation)));
			_OrderedSet_Parameter.getTemplateBinding().add(createTemplateBinding(_OrderedSet_,
				createTemplateParameterSubstitution(_OrderedSet_T, _Parameter)));
			_OrderedSet_Precedence.getTemplateBinding().add(createTemplateBinding(_OrderedSet_,
				createTemplateParameterSubstitution(_OrderedSet_T, _Precedence)));
			_OrderedSet_Property.getTemplateBinding().add(createTemplateBinding(_OrderedSet_,
				createTemplateParameterSubstitution(_OrderedSet_T, _Property)));
			_OrderedSet_String.getTemplateBinding().add(createTemplateBinding(_OrderedSet_,
				createTemplateParameterSubstitution(_OrderedSet_T, _String)));
			_OrderedSet_TemplateParameter.getTemplateBinding().add(createTemplateBinding(_OrderedSet_,
				createTemplateParameterSubstitution(_OrderedSet_T, _TemplateParameter)));
			_OrderedSet_TemplateParameter_1.getTemplateBinding().add(createTemplateBinding(_OrderedSet_,
				createTemplateParameterSubstitution(_OrderedSet_T, _TemplateParameter)));
			_OrderedSet_TupleLiteralPart.getTemplateBinding().add(createTemplateBinding(_OrderedSet_,
				createTemplateParameterSubstitution(_OrderedSet_T, _TupleLiteralPart)));
			_OrderedSet_Type.getTemplateBinding().add(createTemplateBinding(_OrderedSet_,
				createTemplateParameterSubstitution(_OrderedSet_T, _Type)));
			_OrderedSet_Variable.getTemplateBinding().add(createTemplateBinding(_OrderedSet_,
				createTemplateParameterSubstitution(_OrderedSet_T, _Variable)));
			_Sequence_Annotation.getTemplateBinding().add(createTemplateBinding(_Sequence_,
				createTemplateParameterSubstitution(_Sequence_T, _Annotation)));
			_Sequence_Class.getTemplateBinding().add(createTemplateBinding(_Sequence_,
				createTemplateParameterSubstitution(_Sequence_T, _Class)));
			_Sequence_CollectionLiteralPart.getTemplateBinding().add(createTemplateBinding(_Sequence_,
				createTemplateParameterSubstitution(_Sequence_T, _CollectionLiteralPart)));
			_Sequence_Constraint.getTemplateBinding().add(createTemplateBinding(_Sequence_,
				createTemplateParameterSubstitution(_Sequence_T, _Constraint)));
			_Sequence_ConstructorPart.getTemplateBinding().add(createTemplateBinding(_Sequence_,
				createTemplateParameterSubstitution(_Sequence_T, _ConstructorPart)));
			_Sequence_Detail.getTemplateBinding().add(createTemplateBinding(_Sequence_,
				createTemplateParameterSubstitution(_Sequence_T, _Detail)));
			_Sequence_Element.getTemplateBinding().add(createTemplateBinding(_Sequence_,
				createTemplateParameterSubstitution(_Sequence_T, _Element)));
			_Sequence_EnumerationLiteral.getTemplateBinding().add(createTemplateBinding(_Sequence_,
				createTemplateParameterSubstitution(_Sequence_T, _EnumerationLiteral)));
			_Sequence_Import.getTemplateBinding().add(createTemplateBinding(_Sequence_,
				createTemplateParameterSubstitution(_Sequence_T, _Import)));
			_Sequence_OCLExpression.getTemplateBinding().add(createTemplateBinding(_Sequence_,
				createTemplateParameterSubstitution(_Sequence_T, _OCLExpression)));
			_Sequence_Operation.getTemplateBinding().add(createTemplateBinding(_Sequence_,
				createTemplateParameterSubstitution(_Sequence_T, _Operation)));
			_Sequence_Parameter.getTemplateBinding().add(createTemplateBinding(_Sequence_,
				createTemplateParameterSubstitution(_Sequence_T, _Parameter)));
			_Sequence_Precedence.getTemplateBinding().add(createTemplateBinding(_Sequence_,
				createTemplateParameterSubstitution(_Sequence_T, _Precedence)));
			_Sequence_Property.getTemplateBinding().add(createTemplateBinding(_Sequence_,
				createTemplateParameterSubstitution(_Sequence_T, _Property)));
			_Sequence_String.getTemplateBinding().add(createTemplateBinding(_Sequence_,
				createTemplateParameterSubstitution(_Sequence_T, _String)));
			_Sequence_TemplateParameter.getTemplateBinding().add(createTemplateBinding(_Sequence_,
				createTemplateParameterSubstitution(_Sequence_T, _TemplateParameter)));
			_Sequence_TupleLiteralPart.getTemplateBinding().add(createTemplateBinding(_Sequence_,
				createTemplateParameterSubstitution(_Sequence_T, _TupleLiteralPart)));
			_Sequence_Type.getTemplateBinding().add(createTemplateBinding(_Sequence_,
				createTemplateParameterSubstitution(_Sequence_T, _Type)));
			_Sequence_Variable.getTemplateBinding().add(createTemplateBinding(_Sequence_,
				createTemplateParameterSubstitution(_Sequence_T, _Variable)));
			_Set_AssociationClassCallExp.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _AssociationClassCallExp)));
			_Set_Behavior.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _Behavior)));
			_Set_CallOperationAction.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _CallOperationAction)));
			_Set_CollectionType.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _CollectionType)));
			_Set_Comment.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _Comment)));
			_Set_ConnectionPointReference.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _ConnectionPointReference)));
			_Set_Constraint.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _Constraint)));
			_Set_ConstructorPart.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _ConstructorPart)));
			_Set_DataType.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _DataType)));
			_Set_DynamicElement.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _DynamicElement)));
			_Set_DynamicProperty.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _DynamicProperty)));
			_Set_ElementExtension.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _ElementExtension)));
			_Set_Element.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _Element)));
			_Set_EnumLiteralExp.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _EnumLiteralExp)));
			_Set_Import.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _Import)));
			_Set_LoopExp.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _LoopExp)));
			_Set_MessageType.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _MessageType)));
			_Set_Metaclass.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _Metaclass)));
			_Set_NavigationCallExp.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _NavigationCallExp)));
			_Set_OperationCallExp.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _OperationCallExp)));
			_Set_Operation.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _Operation)));
			_Set_Package.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _Package)));
			_Set_ParameterableElement.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _ParameterableElement)));
			_Set_PropertyCallExp.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _PropertyCallExp)));
			_Set_Property.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _Property)));
			_Set_Pseudostate.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _Pseudostate)));
			_Set_Region.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _Region)));
			_Set_Region_1.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _Region)));
			_Set_SendSignalAction.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _SendSignalAction)));
			_Set_StateExp.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _StateExp)));
			_Set_StateMachine.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _StateMachine)));
			_Set_State.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _State)));
			_Set_String.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _String)));
			_Set_TemplateBinding.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _TemplateBinding)));
			_Set_TemplateParameterSubstitution.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _TemplateParameterSubstitution)));
			_Set_TemplateSignature.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _TemplateSignature)));
			_Set_Transition.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _Transition)));
			_Set_Trigger.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _Trigger)));
			_Set_TypeExp.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _TypeExp)));
			_Set_TypeTemplateParameter.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _TypeTemplateParameter)));
			_Set_Type.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _Type)));
			_Set_TypedElement.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _TypedElement)));
			_Set_VariableExp.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _VariableExp)));
			_Set_Variable.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _Variable)));
			_Set_Vertex.getTemplateBinding().add(createTemplateBinding(_Set_,
				createTemplateParameterSubstitution(_Set_T, _Vertex)));
			_UniqueCollection_Annotation.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _Annotation)));
			_UniqueCollection_AssociationClassCallExp.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _AssociationClassCallExp)));
			_UniqueCollection_Behavior.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _Behavior)));
			_UniqueCollection_CallOperationAction.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _CallOperationAction)));
			_UniqueCollection_Class.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _Class)));
			_UniqueCollection_CollectionLiteralPart.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _CollectionLiteralPart)));
			_UniqueCollection_CollectionType.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _CollectionType)));
			_UniqueCollection_Comment.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _Comment)));
			_UniqueCollection_ConnectionPointReference.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _ConnectionPointReference)));
			_UniqueCollection_Constraint.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _Constraint)));
			_UniqueCollection_ConstructorPart.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _ConstructorPart)));
			_UniqueCollection_DataType.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _DataType)));
			_UniqueCollection_Detail.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _Detail)));
			_UniqueCollection_DynamicElement.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _DynamicElement)));
			_UniqueCollection_DynamicProperty.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _DynamicProperty)));
			_UniqueCollection_ElementExtension.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _ElementExtension)));
			_UniqueCollection_Element.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _Element)));
			_UniqueCollection_EnumLiteralExp.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _EnumLiteralExp)));
			_UniqueCollection_EnumerationLiteral.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _EnumerationLiteral)));
			_UniqueCollection_Import.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _Import)));
			_UniqueCollection_LoopExp.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _LoopExp)));
			_UniqueCollection_MessageType.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _MessageType)));
			_UniqueCollection_Metaclass.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _Metaclass)));
			_UniqueCollection_NavigationCallExp.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _NavigationCallExp)));
			_UniqueCollection_OCLExpression.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _OCLExpression)));
			_UniqueCollection_OperationCallExp.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _OperationCallExp)));
			_UniqueCollection_Operation.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _Operation)));
			_UniqueCollection_Package.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _Package)));
			_UniqueCollection_Parameter.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _Parameter)));
			_UniqueCollection_ParameterableElement.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _ParameterableElement)));
			_UniqueCollection_Precedence.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _Precedence)));
			_UniqueCollection_PropertyCallExp.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _PropertyCallExp)));
			_UniqueCollection_Property.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _Property)));
			_UniqueCollection_Pseudostate.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _Pseudostate)));
			_UniqueCollection_Region.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _Region)));
			_UniqueCollection_SendSignalAction.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _SendSignalAction)));
			_UniqueCollection_StateExp.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _StateExp)));
			_UniqueCollection_StateMachine.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _StateMachine)));
			_UniqueCollection_State.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _State)));
			_UniqueCollection_String.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _String)));
			_UniqueCollection_TemplateBinding.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _TemplateBinding)));
			_UniqueCollection_TemplateParameterSubstitution.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _TemplateParameterSubstitution)));
			_UniqueCollection_TemplateParameter.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _TemplateParameter)));
			_UniqueCollection_TemplateSignature.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _TemplateSignature)));
			_UniqueCollection_Transition.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _Transition)));
			_UniqueCollection_Trigger.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _Trigger)));
			_UniqueCollection_TupleLiteralPart.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _TupleLiteralPart)));
			_UniqueCollection_TypeExp.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _TypeExp)));
			_UniqueCollection_TypeTemplateParameter.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _TypeTemplateParameter)));
			_UniqueCollection_Type.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _Type)));
			_UniqueCollection_TypedElement.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _TypedElement)));
			_UniqueCollection_VariableExp.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _VariableExp)));
			_UniqueCollection_Variable.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _Variable)));
			_UniqueCollection_Vertex.getTemplateBinding().add(createTemplateBinding(_UniqueCollection_,
				createTemplateParameterSubstitution(_UniqueCollection_T, _Vertex)));
		}

		protected void installComments() {
			installComment(_Class, "A class is a type that has objects as its instances.");
			installComment(pr_Class_isAbstract, "True when a class is abstract.");
			installComment(_Comment, "A comment is a textual annotation that can be attached to a set of elements.");
			installComment(pr_Comment_annotatedElement, "References the Element(s) being commented.");
			installComment(pr_Comment_body, "Specifies a string that is the comment.");
			installComment(_ConnectionPointReference, "A connection point reference represents a usage (as part of a submachine state) of an entry/exit point defined in the statemachine reference by the submachine state.");
			installComment(pr_ConnectionPointReference_entry, "The entryPoint kind pseudo states corresponding to this connection point.");
			installComment(pr_ConnectionPointReference_exit, "The exitPoints kind pseudo states corresponding to this connection point.");
			installComment(pr_ConnectionPointReference_state, "The State in which the connection point refreshens are defined.");
			installComment(_Constraint, "A constraint is a condition or restriction expressed in natural language text or in a machine readable language for the purpose of declaring some of the semantics of an element.");
			installComment(pr_Constraint_constrainedElement, "The ordered set of Elements referenced by this Constraint.");
			installComment(pr_Constraint_specification, "A condition that must be true when evaluated in order for the constraint to be satisfied.");
			installComment(_DataType, "DataType is an abstract class that acts as a common superclass for different kinds of data types.");
			installComment(_Element, "An element is a constituent of a model.");
			installComment(pr_Element_ownedComment, "The Comments owned by this element.");
			installComment(_Enumeration, "An enumeration defines a set of literals that can be used as its values.");
			installComment(pr_Enumeration_ownedLiteral, "The ordered set of literals for this Enumeration.");
			installComment(_EnumerationLiteral, "An enumeration literal is a value of an enumeration.");
			installComment(pr_EnumerationLiteral_enumeration, "The Enumeration that this EnumerationLiteral is a member of.");
			installComment(_FinalState, "A special kind of state signifying that the enclosing region is completed. If the enclosing region is directly contained in a state machine and all other regions in the state machine also are completed, then it means that the entire state machine is completed.");
			installComment(_NamedElement, "A named element represents an element with a name.");
			installComment(pr_NamedElement_name, "The name of the NamedElement.");
			installComment(_Namespace, "A Namespace is an Element in a model that owns and/or imports a set of NamedElements that can be identified by name.");
			installComment(pr_Namespace_ownedRule, "Specifies a set of Constraints owned by this Namespace.");
			installComment(_OpaqueExpression, "An opaque expression is an uninterpreted textual statement that denotes a (possibly empty) set of values when evaluated in a context.");
			installComment(pr_OpaqueExpression_body, "The text of the expression, possibly in multiple languages.");
			installComment(pr_OpaqueExpression_language, "Specifies the languages in which the expression is stated. The interpretation of the expression body depends on the languages. If the languages are unspecified, they might be implicit from the expression body or the context. Languages are matched to body strings by order.");
			installComment(_Operation, "An operation is owned by a class and may be invoked in the context of objects that are instances of that class. It is a typed element and a multiplicity element.\r\nOperation specializes TemplateableElement in order to support specification of template operations and bound operations. Operation specializes ParameterableElement to specify that an operation can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.");
			installComment(pr_Operation_class, "The class that owns the operation.");
			installComment(pr_Operation_ownedParameter, "The parameters to the operation.");
			installComment(pr_Operation_raisedException, "The exceptions that are declared as possible during an invocation of the operation.");
			installComment(_OperationTemplateParameter, "An operation template parameter exposes an operation as a formal parameter for a template.");
			installComment(_Package, "A package is a container for types and other packages.\r\nPackage specializes TemplateableElement and PackageableElement specializes ParameterableElement to specify that a package can be used as a template and a PackageableElement as a template parameter.");
			installComment(pr_Package_nestedPackage, "The set of contained packages.");
			installComment(pr_Package_nestingPackage, "The containing package.");
			installComment(pr_Package_ownedType, "The set of contained types.");
			installComment(_PackageableElement, "Packageable elements are able to serve as a template parameter.");
			installComment(_Parameter, "A parameter is a typed element that represents a parameter of an operation.");
			installComment(pr_Parameter_operation, "The operation that owns the parameter.");
			installComment(_ParameterableElement, "A parameterable element is an element that can be exposed as a formal template parameter for a template, or specified as an actual parameter in a binding of a template.");
			installComment(op_ParameterableElement_isTemplateParameter, "The query isTemplateParameter() determines if this parameterable element is exposed as a formal template parameter.");
			installComment(pr_ParameterableElement_owningTemplateParameter, "The formal template parameter that owns this element.");
			installComment(pr_ParameterableElement_templateParameter, "The template parameter that exposes this element as a formal parameter.");
			installComment(_PrimitiveType, "A primitive type is a data type implemented by the underlying infrastructure and made available for modeling.");
			installComment(_Property, "A property is a typed element that represents an attribute of a class.\r\nProperty specializes ParameterableElement to specify that a property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.");
			installComment(pr_Property_class, "The class that owns the property, and of which the property is an attribute.");
			installComment(pr_Property_default, "A string that is evaluated to give a default value for the attribute when an object of the owning class is instantiated.");
			installComment(pr_Property_isComposite, "If isComposite is true, the object containing the attribute is a container for the object or value contained in the attribute.");
			installComment(pr_Property_isDerived, "If isDerived is true, the value of the attribute is derived from information elsewhere.");
			installComment(pr_Property_isReadOnly, "If isReadOnly is true, the attribute may not be written to after initialization.");
			installComment(pr_Property_opposite, "Two attributes attr1 and attr2 of two objects o1 and o2 (which may be the same object) may be paired with each other so that o1.attr1 refers to o2 if and only if o2.attr2 refers to o1. In such a case attr1 is the opposite of attr2 and attr2 is the opposite of attr1.");
			installComment(_Pseudostate, "A pseudostate is an abstraction that encompasses different types of transient vertices in the state machine graph.");
			installComment(pr_Pseudostate_kind, "Determines the precise type of the Pseudostate and can be one of: entryPoint, exitPoint, initial, deepHistory, shallowHistory, join, fork, junction, terminate or choice.");
			installComment(pr_Pseudostate_state, "The State that owns this pseudostate and in which it appears.");
			installComment(pr_Pseudostate_stateMachine, "The StateMachine in which this Pseudostate is defined. This only applies to Pseudostates of the kind entryPoint or exitPoint.");
			installComment(el__PseudostateKind_choice, "Choice vertices which, when reached, result in the dynamic evaluation of the guards of the triggers of its outgoing transitions. This realizes a dynamic conditional branch. It allows splitting of transitions into multiple outgoing paths such that the decision on which path to take may be a function of the results of prior actions performed in the same run-tocompletion step. If more than one of the guards evaluates to true, an arbitrary one is selected. If none of the guards evaluates to true, then the model is considered ill-formed. (To avoid this, it is recommended to define one outgoing transition with the predefined else guard for every choice vertex.) Choice vertices should be distinguished from static branch points that are based on junction points (described above).");
			installComment(el__PseudostateKind_deepHistory, "DeepHistory represents the most recent active configuration of the composite state that directly contains this pseudostate; e.g. the state configuration that was active when the composite state was last exited. A composite state can have at most one deep history vertex. At most one transition may originate from the history connector to the default deep history state. This transition is taken in case the composite state had never been active before. Entry actions of states entered on the path to the state represented by a deep history are performed.");
			installComment(el__PseudostateKind_entryPoint, "An entry point pseudostate is an entry point of a state machine or composite state. In each region of the state machine or composite state it has a single transition to a vertex within the same region.");
			installComment(el__PseudostateKind_exitPoint, "An exit point pseudostate is an exit point of a state machine or composite state. Entering an exit point within any region of the composite state or state machine referenced by a submachine state implies the exit of this composite state or submachine state and the triggering of the transition that has this exit point as source in the state machine enclosing the submachine or composite state.");
			installComment(el__PseudostateKind_fork, "Fork vertices serve to split an incoming transition into two or more transitions terminating on orthogonal target vertices\r\n(i.e. vertices in different regions of a composite state). The segments outgoing from a fork vertex must not have guards or triggers.");
			installComment(el__PseudostateKind_initial, "An initial pseudostate represents a default vertex that is the source for a single transition to the default state of a composite state. There can be at most one initial vertex in a region. The outgoing transition from the initial vertex may have a behavior, but not a trigger or guard.");
			installComment(el__PseudostateKind_join, "Join vertices serve to merge several transitions emanating from source vertices in different orthogonal regions. The transitions entering a join vertex cannot have guards or triggers.");
			installComment(el__PseudostateKind_junction, "Junction vertices are semantic-free vertices that are used to chain together multiple transitions. They are used to construct compound transition paths between states. For example, a junction can be used to converge multiple incoming transitions into a single outgoing transition representing a shared transition path (this is known as an merge). Conversely, they can be used to split an incoming transition into multiple outgoing transition segments with different guard conditions. This realizes a static conditional branch. (In the latter case, outgoing transitions whose guard conditions evaluate to false are disabled. A predefined guard denoted \'else\' may be defined for at most one outgoing transition. This transition is enabled if all the guards labeling the other transitions are false.) Static conditional branches are distinct from dynamic conditional branches that are realized by choice vertices (described below).");
			installComment(el__PseudostateKind_shallowHistory, "ShallowHistory represents the most recent active substate of its containing state (but not the substates of that substate). A composite state can have at most one shallow history vertex. A transition coming into the shallow history vertex is equivalent to a transition coming into the most recent active substate of a state. At most one transition may originate from the history connector to the default shallow history state. This transition is taken in case the composite state had never been active before. Entry actions of states entered on the path to the state represented by a shallow history are performed.");
			installComment(el__PseudostateKind_terminate, "Entering a terminate pseudostate implies that the execution of this state machine by means of its context object is terminated. The state machine does not exit any states nor does it perform any exit actions other than those associated with the transition leading to the terminate pseudostate. Entering a terminate pseudostate is equivalent to invoking a DestroyObjectAction.");
			installComment(_Region, "A region is an orthogonal part of either a composite state or a state machine. It contains states and transitions.");
			installComment(pr_Region_extendedRegion, "The region of which this region is an extension.");
			installComment(pr_Region_state, "The State that owns the Region. If a Region is owned by a State, then it cannot also be owned by a StateMachine.");
			installComment(pr_Region_stateMachine, "The StateMachine that owns the Region. If a Region is owned by a StateMachine, then it cannot also be owned by a State.");
			installComment(pr_Region_subvertex, "The set of vertices that are owned by this region.");
			installComment(pr_Region_transition, "The set of transitions owned by the region. Note that internal transitions are owned by a region, but applies to the source state.");
			installComment(_State, "A state models a situation during which some (usually implicit) invariant condition holds.");
			installComment(pr_State_connection, "The entry and exit connection points used in conjunction with this (submachine) state, i.e. as targets and sources, respectively, in the region with the submachine state. A connection point reference references the corresponding definition of a connection point pseudostate in the statemachine referenced by the submachinestate.");
			installComment(pr_State_connectionPoint, "The entry and exit pseudostates of a composite state. These can only be entry or exit Pseudostates, and they must have different names. They can only be defined for composite states.");
			installComment(pr_State_deferrableTrigger, "A list of triggers that are candidates to be retained by the state machine if they trigger no transitions out of the state (not consumed). A deferred trigger is retained until the state machine reaches a state configuration where it is no longer deferred.");
			installComment(pr_State_doActivity, "An optional behavior that is executed while being in the state. The execution starts when this state is entered, and stops either by itself, or when the state is exited, whichever comes first.");
			installComment(pr_State_entry, "An optional behavior that is executed whenever this state is entered regardless of the transition taken to reach the state. If defined, entry actions are always executed to completion prior to any internal behavior or transitions performed within the state.");
			installComment(pr_State_exit, "An optional behavior that is executed whenever this state is exited regardless of which transition was taken out of the state. If defined, exit actions are always executed to completion only after all internal activities and transition actions have completed execution.");
			installComment(pr_State_isComposite, "A state with isComposite=true is said to be a composite state. A composite state is a state that contains at least one region.");
			installComment(pr_State_isOrthogonal, "A state with isOrthogonal=true is said to be an orthogonal composite state. An orthogonal composite state contains two or more regions.");
			installComment(pr_State_isSimple, "A state with isSimple=true is said to be a simple state. A simple state does not have any regions and it does not refer to any submachine state machine.");
			installComment(pr_State_isSubmachineState, "A state with isSubmachineState=true is said to be a submachine state. Such a state refers to a state machine (submachine).");
			installComment(pr_State_redefinedState, "The state of which this state is a redefinition.");
			installComment(pr_State_region, "The regions owned directly by the state.");
			installComment(pr_State_stateInvariant, "Specifies conditions that are always true when this state is the current state. In protocol state machines, state invariants are additional conditions to the preconditions of the outgoing transitions, and to the postcondition of the incoming transitions.");
			installComment(pr_State_submachine, "The state machine that is to be inserted in place of the (submachine) state.");
			installComment(_StateMachine, "State machines can be used to express the behavior of part of a system. Behavior is modeled as a traversal of a graph of state nodes interconnected by one or more joined transition arcs that are triggered by the dispatching of series of (event) occurrences. During this traversal, the state machine executes a series of activities associated with various elements of the state machine.");
			installComment(pr_StateMachine_connectionPoint, "The connection points defined for this state machine. They represent the interface of the state machine when used as part of submachine state.");
			installComment(pr_StateMachine_extendedStateMachine, "The state machines of which this is an extension.");
			installComment(pr_StateMachine_region, "The regions owned directly by the state machine.");
			installComment(pr_StateMachine_submachineState, "References the submachine(s) in case of a submachine state. Multiple machines are referenced in case of a concurrent state.");
			installComment(_TemplateBinding, "A template binding represents a relationship between a templateable element and a template. A template binding specifies the substitutions of actual parameters for the formal parameters of the template.");
			installComment(pr_TemplateBinding_boundElement, "The element that is bound by this binding.");
			installComment(pr_TemplateBinding_parameterSubstitution, "The parameter substitutions owned by this template binding.");
			installComment(pr_TemplateBinding_signature, "The template signature for the template that is the target of the binding.");
			installComment(_TemplateParameter, "A template parameter exposes a parameterable element as a formal template parameter of a template.");
			installComment(pr_TemplateParameter_default, "The element that is the default for this formal template parameter.");
			installComment(pr_TemplateParameter_ownedDefault, "The element that is owned by this template parameter for the purpose of providing a default.");
			installComment(pr_TemplateParameter_ownedParameteredElement, "The element that is owned by this template parameter.");
			installComment(pr_TemplateParameter_parameteredElement, "The element exposed by this template parameter.");
			installComment(pr_TemplateParameter_signature, "The template signature that owns this template parameter.");
			installComment(_TemplateParameterSubstitution, "A template parameter substitution relates the actual parameter to a formal template parameter as part of a template binding.");
			installComment(pr_TemplateParameterSubstitution_actual, "The element that is the actual parameter for this substitution.");
			installComment(pr_TemplateParameterSubstitution_formal, "The formal template parameter that is associated with this substitution.");
			installComment(pr_TemplateParameterSubstitution_ownedActual, "The actual parameter that is owned by this substitution.");
			installComment(pr_TemplateParameterSubstitution_templateBinding, "The optional bindings from this element to templates.");
			installComment(_TemplateSignature, "A template signature bundles the set of formal template parameters for a templated element.");
			installComment(pr_TemplateSignature_ownedParameter, "The formal template parameters that are owned by this template signature.");
			installComment(pr_TemplateSignature_parameter, "The ordered set of all formal template parameters for this template signature.");
			installComment(pr_TemplateSignature_template, "The element that owns this template signature.");
			installComment(_TemplateableElement, "A templateable element is an element that can optionally be defined as a template and bound to other templates.");
			installComment(op_TemplateableElement_isTemplate, "The query isTemplate() returns whether this templateable element is actually a template.");
			installComment(pr_TemplateableElement_ownedTemplateSignature, "The optional template signature specifying the formal template parameters.");
			installComment(op_TemplateableElement_parameterableElements, "The query parameterableElements() returns the set of elements that may be used as the parametered elements for a template parameter of this templateable element. By default, this set includes all the owned elements. Subclasses may override this operation if they choose to restrict the set of parameterable elements.");
			installComment(pr_TemplateableElement_templateBinding, "The optional bindings from this element to templates.");
			installComment(_Transition, "A transition is a directed relationship between a source vertex and a target vertex. It may be part of a compound transition, which takes the state machine from one state configuration to another, representing the complete response of the state machine to an occurrence of an event of a particular type.");
			installComment(pr_Transition_container, "Designates the region that owns this transition.");
			installComment(pr_Transition_effect, "Specifies an optional behavior to be performed when the transition fires.");
			installComment(pr_Transition_guard, "A guard is a constraint that provides a fine-grained control over the firing of the transition. The guard is evaluated when an event occurrence is dispatched by the state machine. If the guard is true at that time, the transition may be enabled, otherwise, it is disabled. Guards should be pure expressions without side effects. Guard expressions with side effects are ill formed.");
			installComment(pr_Transition_kind, "Indicates  the precise type of the transition.");
			installComment(pr_Transition_source, "Designates the originating vertex (state or pseudostate) of the transition.");
			installComment(pr_Transition_target, "Designates the target vertex that is reached when the transition is taken.");
			installComment(pr_Transition_trigger, "Specifies the triggers that may fire the transition.");
			installComment(el__TransitionKind_external, "Implies that the transition, if triggered, will exit the composite (source) state.");
			installComment(el__TransitionKind_internal, "Implies that the transition, if triggered, occurs without exiting or entering the source state. Thus, it does not cause a state change. This means that the entry or exit condition of the source state will not be invoked. An internal transition can be taken even if the state machine is in one or more regions nested within this state.");
			installComment(el__TransitionKind_local, "Implies that the transition, if triggered, will not exit the composite (source) state, but it will apply to any state within the composite state, and these will be exited and entered.");
			installComment(_Type, "A type is a named element that is used as the type for a typed element. A type can be contained in a package.\r\nType is defined to be a kind of templateable element so that a type can be parameterized. It is also defined to be a kind of parameterable element so that a type can be a formal template parameter.");
			installComment(op_null_isTemplate, "The query isTemplate() returns whether this templateable element is actually a template.");
			installComment(pr_Type_package, "Specifies the owning package of this classifier, if any.");
			installComment(_TypeTemplateParameter, "A type template parameter exposes a type as a formal template parameter.");
			installComment(pr_TypeTemplateParameter_allowSubstitutable, "Constrains the required relationship between an actual parameter and the parameteredElement for this formal parameter.");
			installComment(pr_TypeTemplateParameter_constrainingType, "The classifiers that constrain the argument that can be used for the parameter. If the allowSubstitutable attribute is true, then any classifier that is compatible with this constraining classifier can be substituted; otherwise, it must be either this classifier or one of its subclasses. If this property is empty, there are no constraints on the classifier that can be used as an argument.");
			installComment(_TypedElement, "A typed element is a kind of named element that represents an element with a type.");
			installComment(pr_TypedElement_type, "The type of the TypedElement.");
			installComment(_ValueSpecification, "A value specification is the specification of a (possibly empty) set of instances, including both objects and data values.\r\nValueSpecification specializes ParameterableElement to specify that a value specification can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.");
			installComment(op_ValueSpecification_booleanValue, "The query booleanValue() gives a single Boolean value when one can be computed.");
			installComment(op_ValueSpecification_integerValue, "The query integerValue() gives a single Integer value when one can be computed.");
			installComment(op_ValueSpecification_isComputable, "The query isComputable() determines whether a value specification can be computed in a model. This operation cannot be fully defined in OCL. A conforming implementation is expected to deliver true for this operation for all value specifications that it can compute, and to compute all of those for which the operation is true. A conforming implementation is expected to be able to compute the value of all literals.");
			installComment(op_ValueSpecification_isNull, "The query isNull() returns true when it can be computed that the value is null.");
			installComment(op_ValueSpecification_stringValue, "The query stringValue() gives a single String value when one can be computed.");
			installComment(op_ValueSpecification_unlimitedValue, "The query unlimitedValue() gives a single UnlimitedNatural value when one can be computed.");
			installComment(_Vertex, "A vertex is an abstraction of a node in a state machine graph. In general, it can be the source or destination of any number of transitions.");
			installComment(pr_Vertex_container, "The region that contains this vertex.");
			installComment(pr_Vertex_incoming, "Specifies the transitions entering this vertex.");
			installComment(pr_Vertex_outgoing, "Specifies the transitions departing from this vertex.");
		}
	}
}
